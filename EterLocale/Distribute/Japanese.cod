; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\DEV\dev\Srcs\Client\EterLocale\Japanese.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ShiftJIS_IsLeadByte@@YAHD@Z			; ShiftJIS_IsLeadByte
; Function compile flags: /Ogtp
; File d:\dev\dev\srcs\client\eterlocale\japanese.cpp
;	COMDAT ?ShiftJIS_IsLeadByte@@YAHD@Z
_TEXT	SEGMENT
_chByte$ = 8						; size = 1
?ShiftJIS_IsLeadByte@@YAHD@Z PROC			; ShiftJIS_IsLeadByte, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   : 	const unsigned char byByte = (const unsigned char) chByte;
; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  00003	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]
  00006	3c 81		 cmp	 al, 129			; 00000081H
  00008	72 04		 jb	 SHORT $LN3@ShiftJIS_I
  0000a	3c 9f		 cmp	 al, 159			; 0000009fH
  0000c	76 08		 jbe	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  0000e	3c e0		 cmp	 al, 224			; 000000e0H
  00010	72 0b		 jb	 SHORT $LN4@ShiftJIS_I
  00012	3c fc		 cmp	 al, 252			; 000000fcH
  00014	77 07		 ja	 SHORT $LN4@ShiftJIS_I
$LN5@ShiftJIS_I:
  00016	b8 01 00 00 00	 mov	 eax, 1

; 16   : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN4@ShiftJIS_I:

; 13   : 	const unsigned char byByte = (const unsigned char) chByte;
; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  0001d	33 c0		 xor	 eax, eax

; 16   : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?ShiftJIS_IsLeadByte@@YAHD@Z ENDP			; ShiftJIS_IsLeadByte
_TEXT	ENDS
PUBLIC	?ShiftJIS_IsTrailByte@@YAHD@Z			; ShiftJIS_IsTrailByte
; Function compile flags: /Ogtp
;	COMDAT ?ShiftJIS_IsTrailByte@@YAHD@Z
_TEXT	SEGMENT
_chByte$ = 8						; size = 1
?ShiftJIS_IsTrailByte@@YAHD@Z PROC			; ShiftJIS_IsTrailByte, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	const unsigned char byByte = (const unsigned char) chByte;
; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  00003	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]
  00006	3c 40		 cmp	 al, 64			; 00000040H
  00008	72 04		 jb	 SHORT $LN3@ShiftJIS_I@2
  0000a	3c 7e		 cmp	 al, 126			; 0000007eH
  0000c	76 08		 jbe	 SHORT $LN5@ShiftJIS_I@2
$LN3@ShiftJIS_I@2:
  0000e	3c 80		 cmp	 al, 128			; 00000080H
  00010	72 0b		 jb	 SHORT $LN4@ShiftJIS_I@2
  00012	3c fc		 cmp	 al, 252			; 000000fcH
  00014	77 07		 ja	 SHORT $LN4@ShiftJIS_I@2
$LN5@ShiftJIS_I@2:
  00016	b8 01 00 00 00	 mov	 eax, 1

; 23   : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
$LN4@ShiftJIS_I@2:

; 20   : 	const unsigned char byByte = (const unsigned char) chByte;
; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  0001d	33 c0		 xor	 eax, eax

; 23   : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?ShiftJIS_IsTrailByte@@YAHD@Z ENDP			; ShiftJIS_IsTrailByte
_TEXT	ENDS
PUBLIC	?ShiftJIS_StringCompareCI@@YAHPBD0I@Z		; ShiftJIS_StringCompareCI
EXTRN	_tolower:PROC
; Function compile flags: /Ogtp
;	COMDAT ?ShiftJIS_StringCompareCI@@YAHPBD0I@Z
_TEXT	SEGMENT
_szStringLeft$ = 8					; size = 4
_szStringRight$ = 12					; size = 4
_sizeLength$ = 16					; size = 4
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z PROC		; ShiftJIS_StringCompareCI, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 27   : 	const unsigned char* uszString1 = (const unsigned char*) szStringLeft;
; 28   : 	const unsigned char* uszString2 = (const unsigned char*) szStringRight;
; 29   : 	unsigned short c1, c2;
; 30   : 
; 31   : 	if( sizeLength == 0 )

  00003	8b 55 10	 mov	 edx, DWORD PTR _sizeLength$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR _szStringLeft$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _szStringRight$[ebp]
  0000e	85 d2		 test	 edx, edx
  00010	75 06		 jne	 SHORT $LN40@ShiftJIS_S
  00012	5f		 pop	 edi

; 32   : 		return 0;

  00013	33 c0		 xor	 eax, eax
  00015	5b		 pop	 ebx

; 71   : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
$LN40@ShiftJIS_S:
  00018	56		 push	 esi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$LL20@ShiftJIS_S:

; 34   : 		c1 = *uszString1++;

  00020	66 0f b6 03	 movzx	 ax, BYTE PTR [ebx]
  00024	0f b7 c0	 movzx	 eax, ax
  00027	4a		 dec	 edx

; 35   : 		if( MACRO_IsLeadByte(c1) ) {

  00028	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  0002d	43		 inc	 ebx
  0002e	89 55 10	 mov	 DWORD PTR _sizeLength$[ebp], edx
  00031	66 3b c8	 cmp	 cx, ax
  00034	77 0a		 ja	 SHORT $LN38@ShiftJIS_S
  00036	b9 9f 00 00 00	 mov	 ecx, 159		; 0000009fH
  0003b	66 3b c1	 cmp	 ax, cx
  0003e	76 0c		 jbe	 SHORT $LN39@ShiftJIS_S
$LN38@ShiftJIS_S:
  00040	8d 88 20 ff ff
	ff		 lea	 ecx, DWORD PTR [eax-224]
  00046	66 83 f9 1c	 cmp	 cx, 28			; 0000001cH
  0004a	77 40		 ja	 SHORT $LN18@ShiftJIS_S
$LN39@ShiftJIS_S:

; 36   : 			if( sizeLength == 0 ) {

  0004c	85 d2		 test	 edx, edx
  0004e	75 25		 jne	 SHORT $LN15@ShiftJIS_S

; 37   : 				c1 = 0;
; 38   : 				c2 = MACRO_IsLeadByte( *uszString2 ) ? 0 : *uszString2;

  00050	8a 07		 mov	 al, BYTE PTR [edi]
  00052	33 f6		 xor	 esi, esi
  00054	3c 81		 cmp	 al, 129			; 00000081H
  00056	72 08		 jb	 SHORT $LN24@ShiftJIS_S
  00058	3c 9f		 cmp	 al, 159			; 0000009fH
  0005a	0f 86 aa 00 00
	00		 jbe	 $LN31@ShiftJIS_S
$LN24@ShiftJIS_S:
  00060	3c e0		 cmp	 al, 224			; 000000e0H
  00062	72 08		 jb	 SHORT $LN25@ShiftJIS_S
  00064	3c fc		 cmp	 al, 252			; 000000fcH
  00066	0f 86 9e 00 00
	00		 jbe	 $LN31@ShiftJIS_S
$LN25@ShiftJIS_S:
  0006c	66 0f b6 c0	 movzx	 ax, al
  00070	e9 80 00 00 00	 jmp	 $LN42@ShiftJIS_S
$LN15@ShiftJIS_S:

; 39   : 				goto test;
; 40   : 			}
; 41   : 			if( *uszString1 == '\0' )

  00075	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00077	84 c9		 test	 cl, cl
  00079	75 04		 jne	 SHORT $LN13@ShiftJIS_S

; 42   : 				c1 = 0;

  0007b	33 f6		 xor	 esi, esi

; 43   : 			else {

  0007d	eb 1f		 jmp	 SHORT $LN11@ShiftJIS_S
$LN13@ShiftJIS_S:

; 44   : 				c1 = ((c1 << 8) | *uszString1++);

  0007f	66 0f b6 c9	 movzx	 cx, cl
  00083	c1 e0 08	 shl	 eax, 8
  00086	66 0b c1	 or	 ax, cx
  00089	43		 inc	 ebx

; 45   : 			}
; 46   : 		} else

  0008a	eb 0f		 jmp	 SHORT $LN43@ShiftJIS_S
$LN18@ShiftJIS_S:

; 47   : 			c1 = tolower(c1);

  0008c	0f b7 d0	 movzx	 edx, ax
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 _tolower
  00095	8b 55 10	 mov	 edx, DWORD PTR _sizeLength$[ebp]
  00098	83 c4 04	 add	 esp, 4
$LN43@ShiftJIS_S:
  0009b	0f b7 f0	 movzx	 esi, ax
$LN11@ShiftJIS_S:

; 48   : 
; 49   : 		c2 = *uszString2++;

  0009e	66 0f b6 07	 movzx	 ax, BYTE PTR [edi]
  000a2	0f b7 c0	 movzx	 eax, ax

; 50   : 		if( MACRO_IsLeadByte(c2) ) {

  000a5	b9 81 00 00 00	 mov	 ecx, 129		; 00000081H
  000aa	47		 inc	 edi
  000ab	66 3b c8	 cmp	 cx, ax
  000ae	77 0a		 ja	 SHORT $LN8@ShiftJIS_S
  000b0	b9 9f 00 00 00	 mov	 ecx, 159		; 0000009fH
  000b5	66 3b c1	 cmp	 ax, cx
  000b8	76 0c		 jbe	 SHORT $LN9@ShiftJIS_S
$LN8@ShiftJIS_S:
  000ba	8d 88 20 ff ff
	ff		 lea	 ecx, DWORD PTR [eax-224]
  000c0	66 83 f9 1c	 cmp	 cx, 28			; 0000001cH
  000c4	77 20		 ja	 SHORT $LN10@ShiftJIS_S
$LN9@ShiftJIS_S:

; 51   : 			if( sizeLength == 0 ) {

  000c6	85 d2		 test	 edx, edx
  000c8	75 04		 jne	 SHORT $LN7@ShiftJIS_S

; 52   : 				c2 = 0;

  000ca	33 c0		 xor	 eax, eax

; 63   : test:

  000cc	eb 2a		 jmp	 SHORT $test$26901
$LN7@ShiftJIS_S:

; 53   : 				goto test;
; 54   : 			}
; 55   : 			sizeLength--;
; 56   : 			if( *uszString2 == '\0' )

  000ce	8a 0f		 mov	 cl, BYTE PTR [edi]
  000d0	4a		 dec	 edx
  000d1	84 c9		 test	 cl, cl
  000d3	75 04		 jne	 SHORT $LN5@ShiftJIS_S

; 57   : 				c2 = 0;

  000d5	33 c0		 xor	 eax, eax

; 58   : 			else {

  000d7	eb 1f		 jmp	 SHORT $test$26901
$LN5@ShiftJIS_S:

; 59   : 				c2 = ((c2 << 8) | *uszString2++);

  000d9	66 0f b6 c9	 movzx	 cx, cl
  000dd	c1 e0 08	 shl	 eax, 8
  000e0	66 0b c1	 or	 ax, cx
  000e3	47		 inc	 edi

; 60   : 			}
; 61   : 		} else

  000e4	eb 0f		 jmp	 SHORT $LN42@ShiftJIS_S
$LN10@ShiftJIS_S:

; 62   : 			c2 = tolower(c2);

  000e6	0f b7 d0	 movzx	 edx, ax
  000e9	52		 push	 edx
  000ea	e8 00 00 00 00	 call	 _tolower
  000ef	8b 55 10	 mov	 edx, DWORD PTR _sizeLength$[ebp]
  000f2	83 c4 04	 add	 esp, 4
$LN42@ShiftJIS_S:
  000f5	0f b7 c0	 movzx	 eax, ax
$test$26901:

; 64   :         if (c1 != c2)

  000f8	66 3b c6	 cmp	 ax, si
  000fb	75 14		 jne	 SHORT $LN44@ShiftJIS_S

; 66   : 
; 67   :         if (c1 == 0)

  000fd	66 85 f6	 test	 si, si
  00100	74 08		 je	 SHORT $LN31@ShiftJIS_S

; 33   : 	while( sizeLength-- ) {

  00102	85 d2		 test	 edx, edx
  00104	0f 85 16 ff ff
	ff		 jne	 $LL20@ShiftJIS_S
$LN31@ShiftJIS_S:
  0010a	5e		 pop	 esi
  0010b	5f		 pop	 edi

; 68   :             return(0);
; 69   : 	}
; 70   : 	return 0;

  0010c	33 c0		 xor	 eax, eax
  0010e	5b		 pop	 ebx

; 71   : }

  0010f	5d		 pop	 ebp
  00110	c3		 ret	 0
$LN44@ShiftJIS_S:

; 65   :             return( (c1 > c2) ? 1 : -1);

  00111	1b c0		 sbb	 eax, eax
  00113	5e		 pop	 esi
  00114	83 e0 02	 and	 eax, 2
  00117	5f		 pop	 edi
  00118	48		 dec	 eax
  00119	5b		 pop	 ebx

; 71   : }

  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z ENDP		; ShiftJIS_StringCompareCI
_TEXT	ENDS
END
