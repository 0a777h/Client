; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	D:\DEV\dev\Srcs\Client\EterLocale\StringCodec_Vietnamese.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_cp1258_to_unicode DW 00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	020acH
	DW	081H
	DW	0201aH
	DW	0192H
	DW	0201eH
	DW	02026H
	DW	02020H
	DW	02021H
	DW	02c6H
	DW	02030H
	DW	08aH
	DW	02039H
	DW	0152H
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	02018H
	DW	02019H
	DW	0201cH
	DW	0201dH
	DW	02022H
	DW	02013H
	DW	02014H
	DW	02dcH
	DW	02122H
	DW	09aH
	DW	0203aH
	DW	0153H
	DW	09dH
	DW	09eH
	DW	0178H
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0aaH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0aeH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0baH
	DW	0bbH
	DW	0bcH
	DW	0bdH
	DW	0beH
	DW	0bfH
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0102H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0300H
	DW	0cdH
	DW	0ceH
	DW	0cfH
	DW	0110H
	DW	0d1H
	DW	0309H
	DW	0d3H
	DW	0d4H
	DW	01a0H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0daH
	DW	0dbH
	DW	0dcH
	DW	01afH
	DW	0303H
	DW	0dfH
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0103H
	DW	0e4H
	DW	0e5H
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0301H
	DW	0edH
	DW	0eeH
	DW	0efH
	DW	0111H
	DW	0f1H
	DW	0323H
	DW	0f3H
	DW	0f4H
	DW	01a1H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	01b0H
	DW	020abH
	DW	0ffH
_cp1258_composed_table DW 0c1H
	DW	0c0H
	DW	01ea2H
	DW	0c3H
	DW	01ea0H
	DW	0e1H
	DW	0e0H
	DW	01ea3H
	DW	0e3H
	DW	01ea1H
	DW	01eaeH
	DW	01eb0H
	DW	01eb2H
	DW	01eb4H
	DW	01eb6H
	DW	01eafH
	DW	01eb1H
	DW	01eb3H
	DW	01eb5H
	DW	01eb7H
	DW	01ea4H
	DW	01ea6H
	DW	01ea8H
	DW	01eaaH
	DW	01eacH
	DW	01ea5H
	DW	01ea7H
	DW	01ea9H
	DW	01eabH
	DW	01eadH
	DW	0c9H
	DW	0c8H
	DW	01ebaH
	DW	01ebcH
	DW	01eb8H
	DW	0e9H
	DW	0e8H
	DW	01ebbH
	DW	01ebdH
	DW	01eb9H
	DW	01ebeH
	DW	01ec0H
	DW	01ec2H
	DW	01ec4H
	DW	01ec6H
	DW	01ebfH
	DW	01ec1H
	DW	01ec3H
	DW	01ec5H
	DW	01ec7H
	DW	0cdH
	DW	0ccH
	DW	01ec8H
	DW	0128H
	DW	01ecaH
	DW	0edH
	DW	0ecH
	DW	01ec9H
	DW	0129H
	DW	01ecbH
	DW	0d3H
	DW	0d2H
	DW	01eceH
	DW	0d5H
	DW	01eccH
	DW	0f3H
	DW	0f2H
	DW	01ecfH
	DW	0f5H
	DW	01ecdH
	DW	01ed0H
	DW	01ed2H
	DW	01ed4H
	DW	01ed6H
	DW	01ed8H
	DW	01ed1H
	DW	01ed3H
	DW	01ed5H
	DW	01ed7H
	DW	01ed9H
	DW	01edaH
	DW	01edcH
	DW	01edeH
	DW	01ee0H
	DW	01ee2H
	DW	01edbH
	DW	01eddH
	DW	01edfH
	DW	01ee1H
	DW	01ee3H
	DW	0daH
	DW	0d9H
	DW	01ee6H
	DW	0168H
	DW	01ee4H
	DW	0faH
	DW	0f9H
	DW	01ee7H
	DW	0169H
	DW	01ee5H
	DW	01ee8H
	DW	01eeaH
	DW	01eecH
	DW	01eeeH
	DW	01ef0H
	DW	01ee9H
	DW	01eebH
	DW	01eedH
	DW	01eefH
	DW	01ef1H
	DW	0ddH
	DW	01ef2H
	DW	01ef6H
	DW	01ef8H
	DW	01ef4H
	DW	0fdH
	DW	01ef3H
	DW	01ef7H
	DW	01ef9H
	DW	01ef5H
; Function compile flags: /Ogtp
; File d:\dev\dev\srcs\client\eterlocale\stringcodec_vietnamese.cpp
_DATA	ENDS
;	COMDAT ?IsTone@@YA_N_W@Z
_TEXT	SEGMENT
?IsTone@@YA_N_W@Z PROC					; IsTone, COMDAT
; _tone$ = eax

; 70   : 	switch(tone)

  00000	0f b7 c0	 movzx	 eax, ax
  00003	05 00 fd ff ff	 add	 eax, -768		; fffffd00H
  00008	83 f8 23	 cmp	 eax, 35			; 00000023H
  0000b	77 11		 ja	 SHORT $LN1@IsTone
  0000d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN7@IsTone[eax]
  00014	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN8@IsTone[eax*4]
$LN2@IsTone:

; 71   : 	{
; 72   : 	case 0x0300:
; 73   : 	case 0x0301:
; 74   : 	case 0x0309:
; 75   : 	case 0x0303:
; 76   : 	case 0x0323:
; 77   : 		return true;

  0001b	b0 01		 mov	 al, 1

; 80   : 	}
; 81   : }

  0001d	c3		 ret	 0
$LN1@IsTone:

; 78   : 	default:
; 79   : 		return false;

  0001e	32 c0		 xor	 al, al

; 80   : 	}
; 81   : }

  00020	c3		 ret	 0
  00021	8d 49 00	 npad	 3
$LN8@IsTone:
  00024	00 00 00 00	 DD	 $LN2@IsTone
  00028	00 00 00 00	 DD	 $LN1@IsTone
$LN7@IsTone:
  0002c	00		 DB	 0
  0002d	00		 DB	 0
  0002e	01		 DB	 1
  0002f	00		 DB	 0
  00030	01		 DB	 1
  00031	01		 DB	 1
  00032	01		 DB	 1
  00033	01		 DB	 1
  00034	01		 DB	 1
  00035	00		 DB	 0
  00036	01		 DB	 1
  00037	01		 DB	 1
  00038	01		 DB	 1
  00039	01		 DB	 1
  0003a	01		 DB	 1
  0003b	01		 DB	 1
  0003c	01		 DB	 1
  0003d	01		 DB	 1
  0003e	01		 DB	 1
  0003f	01		 DB	 1
  00040	01		 DB	 1
  00041	01		 DB	 1
  00042	01		 DB	 1
  00043	01		 DB	 1
  00044	01		 DB	 1
  00045	01		 DB	 1
  00046	01		 DB	 1
  00047	01		 DB	 1
  00048	01		 DB	 1
  00049	01		 DB	 1
  0004a	01		 DB	 1
  0004b	01		 DB	 1
  0004c	01		 DB	 1
  0004d	01		 DB	 1
  0004e	01		 DB	 1
  0004f	00		 DB	 0
?IsTone@@YA_N_W@Z ENDP					; IsTone
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?ComposeTone@@YA_W_W0@Z
_TEXT	SEGMENT
?ComposeTone@@YA_W_W0@Z PROC				; ComposeTone, COMDAT
; _prev$ = eax
; _tone$ = ecx

; 85   : 	int col, row;
; 86   : 
; 87   : 	switch(tone)

  00000	0f b7 c9	 movzx	 ecx, cx
  00003	81 c1 00 fd ff
	ff		 add	 ecx, -768		; fffffd00H
  00009	83 f9 23	 cmp	 ecx, 35			; 00000023H
  0000c	0f 87 34 02 00
	00		 ja	 $LN36@ComposeTon
  00012	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN39@ComposeTon[ecx]
  00019	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN41@ComposeTon[ecx*4]
$LN33@ComposeTon:

; 88   : 	{
; 89   : 	case 0x0301:	col = 0;	break;

  00020	33 d2		 xor	 edx, edx
  00022	eb 1a		 jmp	 SHORT $LN34@ComposeTon
$LN32@ComposeTon:

; 90   : 	case 0x0300:	col = 1;	break;

  00024	ba 01 00 00 00	 mov	 edx, 1
  00029	eb 13		 jmp	 SHORT $LN34@ComposeTon
$LN31@ComposeTon:

; 91   : 	case 0x0309:	col = 2;	break;

  0002b	ba 02 00 00 00	 mov	 edx, 2
  00030	eb 0c		 jmp	 SHORT $LN34@ComposeTon
$LN30@ComposeTon:

; 92   : 	case 0x0303:	col = 3;	break;

  00032	ba 03 00 00 00	 mov	 edx, 3
  00037	eb 05		 jmp	 SHORT $LN34@ComposeTon
$LN29@ComposeTon:

; 93   : 	case 0x0323:	col = 4;	break;

  00039	ba 04 00 00 00	 mov	 edx, 4
$LN34@ComposeTon:

; 94   : 	default:
; 95   : 		return prev;
; 96   : 	}
; 97   : 
; 98   : 	switch(prev)

  0003e	0f b7 c8	 movzx	 ecx, ax
  00041	81 f9 a0 01 00
	00		 cmp	 ecx, 416		; 000001a0H
  00047	0f 8f af 01 00
	00		 jg	 $LN38@ComposeTon
  0004d	0f 84 96 01 00
	00		 je	 $LN9@ComposeTon
  00053	83 e9 41	 sub	 ecx, 65			; 00000041H
  00056	81 f9 c2 00 00
	00		 cmp	 ecx, 194		; 000000c2H
  0005c	0f 87 e4 01 00
	00		 ja	 $LN36@ComposeTon
  00062	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN40@ComposeTon[ecx]
  00069	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN42@ComposeTon[ecx*4]
$LN25@ComposeTon:

; 99   : 	{
; 100  : 	case 0x0041:	row = 0;	break;

  00070	33 c0		 xor	 eax, eax

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00072	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00075	03 d0		 add	 edx, eax
  00077	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  0007f	c3		 ret	 0
$LN24@ComposeTon:

; 101  : 	case 0x0061:	row = 1;	break;

  00080	b8 01 00 00 00	 mov	 eax, 1

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00085	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00088	03 d0		 add	 edx, eax
  0008a	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00092	c3		 ret	 0
$LN23@ComposeTon:

; 102  : 	case 0x0102:	row = 2;	break;

  00093	b8 02 00 00 00	 mov	 eax, 2

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00098	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0009b	03 d0		 add	 edx, eax
  0009d	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  000a5	c3		 ret	 0
$LN22@ComposeTon:

; 103  : 	case 0x0103:	row = 3;	break;

  000a6	b8 03 00 00 00	 mov	 eax, 3

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000ab	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  000ae	03 d0		 add	 edx, eax
  000b0	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  000b8	c3		 ret	 0
$LN21@ComposeTon:

; 104  : 	case 0x00C2:	row = 4;	break;

  000b9	b8 04 00 00 00	 mov	 eax, 4

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000be	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  000c1	03 d0		 add	 edx, eax
  000c3	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  000cb	c3		 ret	 0
$LN20@ComposeTon:

; 105  : 	case 0x00E2:	row = 5;	break;

  000cc	b8 05 00 00 00	 mov	 eax, 5

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000d1	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  000d4	03 d0		 add	 edx, eax
  000d6	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  000de	c3		 ret	 0
$LN19@ComposeTon:

; 106  : 	case 0x0045:	row = 6;	break;

  000df	b8 06 00 00 00	 mov	 eax, 6

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000e4	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  000e7	03 d0		 add	 edx, eax
  000e9	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  000f1	c3		 ret	 0
$LN18@ComposeTon:

; 107  : 	case 0x0065:	row = 7;	break;

  000f2	b8 07 00 00 00	 mov	 eax, 7

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  000f7	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  000fa	03 d0		 add	 edx, eax
  000fc	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00104	c3		 ret	 0
$LN17@ComposeTon:

; 108  : 	case 0x00CA:	row = 8;	break;

  00105	b8 08 00 00 00	 mov	 eax, 8

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0010a	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0010d	03 d0		 add	 edx, eax
  0010f	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00117	c3		 ret	 0
$LN16@ComposeTon:

; 109  : 	case 0x00EA:	row = 9;	break;

  00118	b8 09 00 00 00	 mov	 eax, 9

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0011d	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00120	03 d0		 add	 edx, eax
  00122	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  0012a	c3		 ret	 0
$LN15@ComposeTon:

; 110  : 	case 0x0049:	row = 10;	break;

  0012b	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00130	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00133	03 d0		 add	 edx, eax
  00135	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  0013d	c3		 ret	 0
$LN14@ComposeTon:

; 111  : 	case 0x0069:	row = 11;	break;

  0013e	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00143	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00146	03 d0		 add	 edx, eax
  00148	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00150	c3		 ret	 0
$LN13@ComposeTon:

; 112  : 	case 0x004F:	row = 12;	break;

  00151	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00156	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00159	03 d0		 add	 edx, eax
  0015b	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00163	c3		 ret	 0
$LN12@ComposeTon:

; 113  : 	case 0x006F:	row = 13;	break;

  00164	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00169	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0016c	03 d0		 add	 edx, eax
  0016e	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00176	c3		 ret	 0
$LN11@ComposeTon:

; 114  : 	case 0x00D4:	row = 14;	break;

  00177	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0017c	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0017f	03 d0		 add	 edx, eax
  00181	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00189	c3		 ret	 0
$LN10@ComposeTon:

; 115  : 	case 0x00F4:	row = 15;	break;

  0018a	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  0018f	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00192	03 d0		 add	 edx, eax
  00194	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  0019c	c3		 ret	 0
$LN7@ComposeTon:

; 118  : 	case 0x0055:	row = 18;	break;

  0019d	b8 12 00 00 00	 mov	 eax, 18			; 00000012H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001a2	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  001a5	03 d0		 add	 edx, eax
  001a7	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  001af	c3		 ret	 0
$LN6@ComposeTon:

; 119  : 	case 0x0075:	row = 19;	break;

  001b0	b8 13 00 00 00	 mov	 eax, 19			; 00000013H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001b5	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  001b8	03 d0		 add	 edx, eax
  001ba	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  001c2	c3		 ret	 0
$LN3@ComposeTon:

; 121  : 	case 0x01B0:	row = 21;	break;
; 122  : 	case 0x0059:	row = 22;	break;

  001c3	b8 16 00 00 00	 mov	 eax, 22			; 00000016H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001c8	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  001cb	03 d0		 add	 edx, eax
  001cd	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  001d5	c3		 ret	 0
$LN2@ComposeTon:

; 123  : 	case 0x0079:	row = 23;	break;

  001d6	b8 17 00 00 00	 mov	 eax, 23			; 00000017H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001db	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  001de	03 d0		 add	 edx, eax
  001e0	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  001e8	c3		 ret	 0
$LN9@ComposeTon:

; 116  : 	case 0x01A0:	row = 16;	break;

  001e9	b8 10 00 00 00	 mov	 eax, 16			; 00000010H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  001ee	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  001f1	03 d0		 add	 edx, eax
  001f3	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  001fb	c3		 ret	 0
$LN38@ComposeTon:

; 94   : 	default:
; 95   : 		return prev;
; 96   : 	}
; 97   : 
; 98   : 	switch(prev)

  001fc	81 e9 a1 01 00
	00		 sub	 ecx, 417		; 000001a1H
  00202	74 30		 je	 SHORT $LN8@ComposeTon
  00204	83 e9 0e	 sub	 ecx, 14			; 0000000eH
  00207	74 18		 je	 SHORT $LN5@ComposeTon
  00209	83 e9 01	 sub	 ecx, 1

; 124  : 	default:
; 125  : 		return prev;

  0020c	75 38		 jne	 SHORT $LN36@ComposeTon
  0020e	b8 15 00 00 00	 mov	 eax, 21			; 00000015H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00213	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00216	03 d0		 add	 edx, eax
  00218	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00220	c3		 ret	 0
$LN5@ComposeTon:

; 120  : 	case 0x01AF:	row = 20;	break;

  00221	b8 14 00 00 00	 mov	 eax, 20			; 00000014H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00226	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  00229	03 d0		 add	 edx, eax
  0022b	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]

; 129  : }

  00233	c3		 ret	 0
$LN8@ComposeTon:

; 117  : 	case 0x01A1:	row = 17;	break;

  00234	b8 11 00 00 00	 mov	 eax, 17			; 00000011H

; 126  : 	}
; 127  : 
; 128  : 	return cp1258_composed_table[row][col];

  00239	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
  0023c	03 d0		 add	 edx, eax
  0023e	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR _cp1258_composed_table[edx*2]
$LN36@ComposeTon:

; 129  : }

  00246	c3		 ret	 0
  00247	90		 npad	 1
$LN41@ComposeTon:
  00248	00 00 00 00	 DD	 $LN32@ComposeTon
  0024c	00 00 00 00	 DD	 $LN33@ComposeTon
  00250	00 00 00 00	 DD	 $LN30@ComposeTon
  00254	00 00 00 00	 DD	 $LN31@ComposeTon
  00258	00 00 00 00	 DD	 $LN29@ComposeTon
  0025c	00 00 00 00	 DD	 $LN36@ComposeTon
$LN39@ComposeTon:
  00260	00		 DB	 0
  00261	01		 DB	 1
  00262	05		 DB	 5
  00263	02		 DB	 2
  00264	05		 DB	 5
  00265	05		 DB	 5
  00266	05		 DB	 5
  00267	05		 DB	 5
  00268	05		 DB	 5
  00269	03		 DB	 3
  0026a	05		 DB	 5
  0026b	05		 DB	 5
  0026c	05		 DB	 5
  0026d	05		 DB	 5
  0026e	05		 DB	 5
  0026f	05		 DB	 5
  00270	05		 DB	 5
  00271	05		 DB	 5
  00272	05		 DB	 5
  00273	05		 DB	 5
  00274	05		 DB	 5
  00275	05		 DB	 5
  00276	05		 DB	 5
  00277	05		 DB	 5
  00278	05		 DB	 5
  00279	05		 DB	 5
  0027a	05		 DB	 5
  0027b	05		 DB	 5
  0027c	05		 DB	 5
  0027d	05		 DB	 5
  0027e	05		 DB	 5
  0027f	05		 DB	 5
  00280	05		 DB	 5
  00281	05		 DB	 5
  00282	05		 DB	 5
  00283	04		 DB	 4
$LN42@ComposeTon:
  00284	00 00 00 00	 DD	 $LN25@ComposeTon
  00288	00 00 00 00	 DD	 $LN19@ComposeTon
  0028c	00 00 00 00	 DD	 $LN15@ComposeTon
  00290	00 00 00 00	 DD	 $LN13@ComposeTon
  00294	00 00 00 00	 DD	 $LN7@ComposeTon
  00298	00 00 00 00	 DD	 $LN3@ComposeTon
  0029c	00 00 00 00	 DD	 $LN24@ComposeTon
  002a0	00 00 00 00	 DD	 $LN18@ComposeTon
  002a4	00 00 00 00	 DD	 $LN14@ComposeTon
  002a8	00 00 00 00	 DD	 $LN12@ComposeTon
  002ac	00 00 00 00	 DD	 $LN6@ComposeTon
  002b0	00 00 00 00	 DD	 $LN2@ComposeTon
  002b4	00 00 00 00	 DD	 $LN21@ComposeTon
  002b8	00 00 00 00	 DD	 $LN17@ComposeTon
  002bc	00 00 00 00	 DD	 $LN11@ComposeTon
  002c0	00 00 00 00	 DD	 $LN20@ComposeTon
  002c4	00 00 00 00	 DD	 $LN16@ComposeTon
  002c8	00 00 00 00	 DD	 $LN10@ComposeTon
  002cc	00 00 00 00	 DD	 $LN23@ComposeTon
  002d0	00 00 00 00	 DD	 $LN22@ComposeTon
  002d4	00 00 00 00	 DD	 $LN36@ComposeTon
$LN40@ComposeTon:
  002d8	00		 DB	 0
  002d9	14		 DB	 20			; 00000014H
  002da	14		 DB	 20			; 00000014H
  002db	14		 DB	 20			; 00000014H
  002dc	01		 DB	 1
  002dd	14		 DB	 20			; 00000014H
  002de	14		 DB	 20			; 00000014H
  002df	14		 DB	 20			; 00000014H
  002e0	02		 DB	 2
  002e1	14		 DB	 20			; 00000014H
  002e2	14		 DB	 20			; 00000014H
  002e3	14		 DB	 20			; 00000014H
  002e4	14		 DB	 20			; 00000014H
  002e5	14		 DB	 20			; 00000014H
  002e6	03		 DB	 3
  002e7	14		 DB	 20			; 00000014H
  002e8	14		 DB	 20			; 00000014H
  002e9	14		 DB	 20			; 00000014H
  002ea	14		 DB	 20			; 00000014H
  002eb	14		 DB	 20			; 00000014H
  002ec	04		 DB	 4
  002ed	14		 DB	 20			; 00000014H
  002ee	14		 DB	 20			; 00000014H
  002ef	14		 DB	 20			; 00000014H
  002f0	05		 DB	 5
  002f1	14		 DB	 20			; 00000014H
  002f2	14		 DB	 20			; 00000014H
  002f3	14		 DB	 20			; 00000014H
  002f4	14		 DB	 20			; 00000014H
  002f5	14		 DB	 20			; 00000014H
  002f6	14		 DB	 20			; 00000014H
  002f7	14		 DB	 20			; 00000014H
  002f8	06		 DB	 6
  002f9	14		 DB	 20			; 00000014H
  002fa	14		 DB	 20			; 00000014H
  002fb	14		 DB	 20			; 00000014H
  002fc	07		 DB	 7
  002fd	14		 DB	 20			; 00000014H
  002fe	14		 DB	 20			; 00000014H
  002ff	14		 DB	 20			; 00000014H
  00300	08		 DB	 8
  00301	14		 DB	 20			; 00000014H
  00302	14		 DB	 20			; 00000014H
  00303	14		 DB	 20			; 00000014H
  00304	14		 DB	 20			; 00000014H
  00305	14		 DB	 20			; 00000014H
  00306	09		 DB	 9
  00307	14		 DB	 20			; 00000014H
  00308	14		 DB	 20			; 00000014H
  00309	14		 DB	 20			; 00000014H
  0030a	14		 DB	 20			; 00000014H
  0030b	14		 DB	 20			; 00000014H
  0030c	0a		 DB	 10			; 0000000aH
  0030d	14		 DB	 20			; 00000014H
  0030e	14		 DB	 20			; 00000014H
  0030f	14		 DB	 20			; 00000014H
  00310	0b		 DB	 11			; 0000000bH
  00311	14		 DB	 20			; 00000014H
  00312	14		 DB	 20			; 00000014H
  00313	14		 DB	 20			; 00000014H
  00314	14		 DB	 20			; 00000014H
  00315	14		 DB	 20			; 00000014H
  00316	14		 DB	 20			; 00000014H
  00317	14		 DB	 20			; 00000014H
  00318	14		 DB	 20			; 00000014H
  00319	14		 DB	 20			; 00000014H
  0031a	14		 DB	 20			; 00000014H
  0031b	14		 DB	 20			; 00000014H
  0031c	14		 DB	 20			; 00000014H
  0031d	14		 DB	 20			; 00000014H
  0031e	14		 DB	 20			; 00000014H
  0031f	14		 DB	 20			; 00000014H
  00320	14		 DB	 20			; 00000014H
  00321	14		 DB	 20			; 00000014H
  00322	14		 DB	 20			; 00000014H
  00323	14		 DB	 20			; 00000014H
  00324	14		 DB	 20			; 00000014H
  00325	14		 DB	 20			; 00000014H
  00326	14		 DB	 20			; 00000014H
  00327	14		 DB	 20			; 00000014H
  00328	14		 DB	 20			; 00000014H
  00329	14		 DB	 20			; 00000014H
  0032a	14		 DB	 20			; 00000014H
  0032b	14		 DB	 20			; 00000014H
  0032c	14		 DB	 20			; 00000014H
  0032d	14		 DB	 20			; 00000014H
  0032e	14		 DB	 20			; 00000014H
  0032f	14		 DB	 20			; 00000014H
  00330	14		 DB	 20			; 00000014H
  00331	14		 DB	 20			; 00000014H
  00332	14		 DB	 20			; 00000014H
  00333	14		 DB	 20			; 00000014H
  00334	14		 DB	 20			; 00000014H
  00335	14		 DB	 20			; 00000014H
  00336	14		 DB	 20			; 00000014H
  00337	14		 DB	 20			; 00000014H
  00338	14		 DB	 20			; 00000014H
  00339	14		 DB	 20			; 00000014H
  0033a	14		 DB	 20			; 00000014H
  0033b	14		 DB	 20			; 00000014H
  0033c	14		 DB	 20			; 00000014H
  0033d	14		 DB	 20			; 00000014H
  0033e	14		 DB	 20			; 00000014H
  0033f	14		 DB	 20			; 00000014H
  00340	14		 DB	 20			; 00000014H
  00341	14		 DB	 20			; 00000014H
  00342	14		 DB	 20			; 00000014H
  00343	14		 DB	 20			; 00000014H
  00344	14		 DB	 20			; 00000014H
  00345	14		 DB	 20			; 00000014H
  00346	14		 DB	 20			; 00000014H
  00347	14		 DB	 20			; 00000014H
  00348	14		 DB	 20			; 00000014H
  00349	14		 DB	 20			; 00000014H
  0034a	14		 DB	 20			; 00000014H
  0034b	14		 DB	 20			; 00000014H
  0034c	14		 DB	 20			; 00000014H
  0034d	14		 DB	 20			; 00000014H
  0034e	14		 DB	 20			; 00000014H
  0034f	14		 DB	 20			; 00000014H
  00350	14		 DB	 20			; 00000014H
  00351	14		 DB	 20			; 00000014H
  00352	14		 DB	 20			; 00000014H
  00353	14		 DB	 20			; 00000014H
  00354	14		 DB	 20			; 00000014H
  00355	14		 DB	 20			; 00000014H
  00356	14		 DB	 20			; 00000014H
  00357	14		 DB	 20			; 00000014H
  00358	14		 DB	 20			; 00000014H
  00359	0c		 DB	 12			; 0000000cH
  0035a	14		 DB	 20			; 00000014H
  0035b	14		 DB	 20			; 00000014H
  0035c	14		 DB	 20			; 00000014H
  0035d	14		 DB	 20			; 00000014H
  0035e	14		 DB	 20			; 00000014H
  0035f	14		 DB	 20			; 00000014H
  00360	14		 DB	 20			; 00000014H
  00361	0d		 DB	 13			; 0000000dH
  00362	14		 DB	 20			; 00000014H
  00363	14		 DB	 20			; 00000014H
  00364	14		 DB	 20			; 00000014H
  00365	14		 DB	 20			; 00000014H
  00366	14		 DB	 20			; 00000014H
  00367	14		 DB	 20			; 00000014H
  00368	14		 DB	 20			; 00000014H
  00369	14		 DB	 20			; 00000014H
  0036a	14		 DB	 20			; 00000014H
  0036b	0e		 DB	 14			; 0000000eH
  0036c	14		 DB	 20			; 00000014H
  0036d	14		 DB	 20			; 00000014H
  0036e	14		 DB	 20			; 00000014H
  0036f	14		 DB	 20			; 00000014H
  00370	14		 DB	 20			; 00000014H
  00371	14		 DB	 20			; 00000014H
  00372	14		 DB	 20			; 00000014H
  00373	14		 DB	 20			; 00000014H
  00374	14		 DB	 20			; 00000014H
  00375	14		 DB	 20			; 00000014H
  00376	14		 DB	 20			; 00000014H
  00377	14		 DB	 20			; 00000014H
  00378	14		 DB	 20			; 00000014H
  00379	0f		 DB	 15			; 0000000fH
  0037a	14		 DB	 20			; 00000014H
  0037b	14		 DB	 20			; 00000014H
  0037c	14		 DB	 20			; 00000014H
  0037d	14		 DB	 20			; 00000014H
  0037e	14		 DB	 20			; 00000014H
  0037f	14		 DB	 20			; 00000014H
  00380	14		 DB	 20			; 00000014H
  00381	10		 DB	 16			; 00000010H
  00382	14		 DB	 20			; 00000014H
  00383	14		 DB	 20			; 00000014H
  00384	14		 DB	 20			; 00000014H
  00385	14		 DB	 20			; 00000014H
  00386	14		 DB	 20			; 00000014H
  00387	14		 DB	 20			; 00000014H
  00388	14		 DB	 20			; 00000014H
  00389	14		 DB	 20			; 00000014H
  0038a	14		 DB	 20			; 00000014H
  0038b	11		 DB	 17			; 00000011H
  0038c	14		 DB	 20			; 00000014H
  0038d	14		 DB	 20			; 00000014H
  0038e	14		 DB	 20			; 00000014H
  0038f	14		 DB	 20			; 00000014H
  00390	14		 DB	 20			; 00000014H
  00391	14		 DB	 20			; 00000014H
  00392	14		 DB	 20			; 00000014H
  00393	14		 DB	 20			; 00000014H
  00394	14		 DB	 20			; 00000014H
  00395	14		 DB	 20			; 00000014H
  00396	14		 DB	 20			; 00000014H
  00397	14		 DB	 20			; 00000014H
  00398	14		 DB	 20			; 00000014H
  00399	12		 DB	 18			; 00000012H
  0039a	13		 DB	 19			; 00000013H
?ComposeTone@@YA_W_W0@Z ENDP				; ComposeTone
_TEXT	ENDS
PUBLIC	?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z	; EL_String_Decode_Vietnamese
; Function compile flags: /Ogtp
;	COMDAT ?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z
_TEXT	SEGMENT
_multi$ = 8						; size = 4
_multiLen$ = 12						; size = 4
_wide$ = 16						; size = 4
_wideLen$ = 20						; size = 4
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z PROC	; EL_String_Decode_Vietnamese, COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 133  : 	if(multiLen < 0)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _multiLen$[ebp]
  00007	56		 push	 esi
  00008	85 db		 test	 ebx, ebx
  0000a	7d 12		 jge	 SHORT $LN16@EL_String_

; 134  : 		multiLen = (int)strlen(multi) + 1;

  0000c	8b 45 08	 mov	 eax, DWORD PTR _multi$[ebp]
  0000f	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL13@EL_String_:
  00012	8a 08		 mov	 cl, BYTE PTR [eax]
  00014	40		 inc	 eax
  00015	84 c9		 test	 cl, cl
  00017	75 f9		 jne	 SHORT $LL13@EL_String_
  00019	2b c2		 sub	 eax, edx
  0001b	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LN16@EL_String_:

; 135  : 
; 136  : 	int src = 0;
; 137  : 	int dest = 0;

  0001e	33 f6		 xor	 esi, esi

; 138  : 
; 139  : 	if(multiLen > 0)

  00020	85 db		 test	 ebx, ebx
  00022	7e 65		 jle	 SHORT $LN15@EL_String_

; 140  : 	{
; 141  : 		/* 첫글자는 무조건 변경 */ 
; 142  : 		wchar_t prev = cp1258_to_unicode[(BYTE)multi[src++]];

  00024	8b 45 08	 mov	 eax, DWORD PTR _multi$[ebp]
  00027	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0002a	0f b7 14 4d 00
	00 00 00	 movzx	 edx, WORD PTR _cp1258_to_unicode[ecx*2]
  00032	57		 push	 edi
  00033	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]

; 143  : 
; 144  : 		while(src < multiLen)

  00036	3b df		 cmp	 ebx, edi
  00038	7e 41		 jle	 SHORT $LN5@EL_String_
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL6@EL_String_:

; 145  : 		{
; 146  : 			wchar_t unicode = cp1258_to_unicode[(BYTE)multi[src]];

  00040	8b 45 08	 mov	 eax, DWORD PTR _multi$[ebp]
  00043	0f b6 0c 07	 movzx	 ecx, BYTE PTR [edi+eax]
  00047	0f b7 0c 4d 00
	00 00 00	 movzx	 ecx, WORD PTR _cp1258_to_unicode[ecx*2]

; 147  : 
; 148  : 			/* 다음 문자가 Tone 인가? */ 
; 149  : 			if(IsTone(unicode))

  0004f	8b c1		 mov	 eax, ecx
  00051	e8 00 00 00 00	 call	 ?IsTone@@YA_N_W@Z	; IsTone
  00056	84 c0		 test	 al, al
  00058	74 0c		 je	 SHORT $LN4@EL_String_

; 150  : 			{
; 151  : 				/* 앞의 문자와 합하자. */ 
; 152  : 				prev = ComposeTone(prev, unicode);

  0005a	8b c2		 mov	 eax, edx
  0005c	e8 00 00 00 00	 call	 ?ComposeTone@@YA_W_W0@Z	; ComposeTone
  00061	0f b7 d0	 movzx	 edx, ax

; 153  : 			}
; 154  : 			else

  00064	eb 10		 jmp	 SHORT $LN3@EL_String_
$LN4@EL_String_:

; 155  : 			{
; 156  : 				/* 일반 문자가 왔다. 앞 문자를 변환 */ 
; 157  : 				if(dest < wideLen)

  00066	3b 75 14	 cmp	 esi, DWORD PTR _wideLen$[ebp]
  00069	7d 08		 jge	 SHORT $LN17@EL_String_

; 158  : 					wide[dest++] = prev;

  0006b	8b 45 10	 mov	 eax, DWORD PTR _wide$[ebp]
  0006e	66 89 14 70	 mov	 WORD PTR [eax+esi*2], dx
  00072	46		 inc	 esi
$LN17@EL_String_:

; 159  : 				prev = unicode;

  00073	0f b7 d1	 movzx	 edx, cx
$LN3@EL_String_:

; 160  : 			}
; 161  : 			++src;

  00076	47		 inc	 edi
  00077	3b fb		 cmp	 edi, ebx
  00079	7c c5		 jl	 SHORT $LL6@EL_String_
$LN5@EL_String_:

; 162  : 		}
; 163  : 
; 164  : 		if(dest < wideLen)

  0007b	3b 75 14	 cmp	 esi, DWORD PTR _wideLen$[ebp]
  0007e	5f		 pop	 edi
  0007f	7d 08		 jge	 SHORT $LN15@EL_String_

; 165  : 			wide[dest++] = prev;

  00081	8b 4d 10	 mov	 ecx, DWORD PTR _wide$[ebp]
  00084	66 89 14 71	 mov	 WORD PTR [ecx+esi*2], dx
  00088	46		 inc	 esi
$LN15@EL_String_:

; 166  : 	}
; 167  : 
; 168  : 	return dest;

  00089	8b c6		 mov	 eax, esi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx

; 169  : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z ENDP	; EL_String_Decode_Vietnamese
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DecomposeLetter@@YA_N_WPAD@Z
_TEXT	SEGMENT
?DecomposeLetter@@YA_N_WPAD@Z PROC			; DecomposeLetter, COMDAT
; _input$ = edx
; _letter$ = eax

; 173  : 	switch(input)

  00000	0f b7 ca	 movzx	 ecx, dx
  00003	81 f9 a0 1e 00
	00		 cmp	 ecx, 7840		; 00001ea0H
  00009	7f 52		 jg	 SHORT $LN41@DecomposeL
  0000b	74 7f		 je	 SHORT $LN36@DecomposeL
  0000d	81 e9 c0 00 00
	00		 sub	 ecx, 192		; 000000c0H
  00013	81 f9 f0 00 00
	00		 cmp	 ecx, 240		; 000000f0H
  00019	0f 87 e9 00 00
	00		 ja	 $LN37@DecomposeL
  0001f	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN43@DecomposeL[ecx]
  00026	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN46@DecomposeL[ecx*4]
$LN12@DecomposeL:

; 342  : 		return true;
; 343  : 	case 0x0102: // L'Ă'
; 344  : 		*letter = (char)0xc3;

  0002d	c6 00 c3	 mov	 BYTE PTR [eax], -61	; ffffffc3H

; 375  : 		return true;

  00030	b0 01		 mov	 al, 1

; 384  : }

  00032	c3		 ret	 0
$LN11@DecomposeL:

; 345  : 		return true;
; 346  : 	case 0x0103: // L'ă'
; 347  : 		*letter = (char)0xe3;

  00033	c6 00 e3	 mov	 BYTE PTR [eax], -29	; ffffffe3H

; 375  : 		return true;

  00036	b0 01		 mov	 al, 1

; 384  : }

  00038	c3		 ret	 0
$LN10@DecomposeL:

; 348  : 		return true;
; 349  : 	case 0x0110: // L'Đ'
; 350  : 		*letter = (char)0xd0;

  00039	c6 00 d0	 mov	 BYTE PTR [eax], -48	; ffffffd0H

; 375  : 		return true;

  0003c	b0 01		 mov	 al, 1

; 384  : }

  0003e	c3		 ret	 0
$LN9@DecomposeL:

; 351  : 		return true;
; 352  : 	case 0x0111: // L'đ'
; 353  : 		*letter = (char)0xf0;

  0003f	c6 00 f0	 mov	 BYTE PTR [eax], -16	; fffffff0H

; 375  : 		return true;

  00042	b0 01		 mov	 al, 1

; 384  : }

  00044	c3		 ret	 0
$LN8@DecomposeL:

; 354  : 		return true;
; 355  : 	case 0x01a0: // L'Ơ'
; 356  : 		*letter = (char)0xd5;

  00045	c6 00 d5	 mov	 BYTE PTR [eax], -43	; ffffffd5H

; 375  : 		return true;

  00048	b0 01		 mov	 al, 1

; 384  : }

  0004a	c3		 ret	 0
$LN7@DecomposeL:

; 357  : 		return true;
; 358  : 	case 0x01a1: // L'ơ'
; 359  : 		*letter = (char)0xf5;

  0004b	c6 00 f5	 mov	 BYTE PTR [eax], -11	; fffffff5H

; 375  : 		return true;

  0004e	b0 01		 mov	 al, 1

; 384  : }

  00050	c3		 ret	 0
$LN6@DecomposeL:

; 360  : 		return true;
; 361  : 	case 0x01af: // L'Ư'
; 362  : 		*letter = (char)0xdd;

  00051	c6 00 dd	 mov	 BYTE PTR [eax], -35	; ffffffddH

; 375  : 		return true;

  00054	b0 01		 mov	 al, 1

; 384  : }

  00056	c3		 ret	 0
$LN5@DecomposeL:

; 363  : 		return true;
; 364  : 	case 0x01b0: // L'ư'
; 365  : 		*letter = (char)0xfd;

  00057	c6 00 fd	 mov	 BYTE PTR [eax], -3	; fffffffdH

; 375  : 		return true;

  0005a	b0 01		 mov	 al, 1

; 384  : }

  0005c	c3		 ret	 0
$LN41@DecomposeL:

; 173  : 	switch(input)

  0005d	81 f9 1c 20 00
	00		 cmp	 ecx, 8220		; 0000201cH
  00063	0f 8f 8f 00 00
	00		 jg	 $LN42@DecomposeL
  00069	0f 84 b1 00 00
	00		 je	 $LN2@DecomposeL
  0006f	81 e9 a1 1e 00
	00		 sub	 ecx, 7841		; 00001ea1H
  00075	83 f9 58	 cmp	 ecx, 88			; 00000058H
  00078	0f 87 8a 00 00
	00		 ja	 $LN37@DecomposeL
  0007e	0f b6 89 00 00
	00 00		 movzx	 ecx, BYTE PTR $LN44@DecomposeL[ecx]
  00085	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN47@DecomposeL[ecx*4]
$LN36@DecomposeL:

; 174  : 	{
; 175  : 	case 0x00c1:  // L'Á'
; 176  : 	case 0x00c0:  // L'À'
; 177  : 	case 0x1ea2:  // L'Ả'
; 178  : 	case 0x00c3:  // L'Ã'
; 179  : 	case 0x1ea0:  // L'Ạ'
; 180  : 		*letter = 'A';

  0008c	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H

; 375  : 		return true;

  0008f	b0 01		 mov	 al, 1

; 384  : }

  00091	c3		 ret	 0
$LN35@DecomposeL:

; 181  : 		return true;
; 182  : 	case 0x00e1:  // L'á'
; 183  : 	case 0x00e0:  // L'à'
; 184  : 	case 0x1ea3:  // L'ả'
; 185  : 	case 0x00e3:  // L'ã'
; 186  : 	case 0x1ea1:  // L'ạ'
; 187  : 		*letter = 'a';

  00092	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H

; 375  : 		return true;

  00095	b0 01		 mov	 al, 1

; 384  : }

  00097	c3		 ret	 0
$LN32@DecomposeL:

; 188  : 		return true;
; 189  : 	case 0x1eae:  // L'Ắ'
; 190  : 	case 0x1eb0:  // L'Ằ'
; 191  : 	case 0x1eb2:  // L'Ẳ'
; 192  : 	case 0x1eb4:  // L'Ẵ'
; 193  : 	case 0x1eb6:  // L'Ặ'
; 194  : 		*letter = (char)0xc3;
; 195  : 		return true;
; 196  : 	case 0x1eaf:  // L'ắ'
; 197  : 	case 0x1eb1:  // L'ằ'
; 198  : 	case 0x1eb3:  // L'ẳ'
; 199  : 	case 0x1eb5:  // L'ẵ'
; 200  : 	case 0x1eb7:  // L'ặ'
; 201  : 		*letter = (char)0xe3;
; 202  : 		return true;
; 203  : 	case 0x1ea4:  // L'Ấ'
; 204  : 	case 0x1ea6:  // L'Ầ'
; 205  : 	case 0x1ea8:  // L'Ẩ'
; 206  : 	case 0x1eaa:  // L'Ẫ'
; 207  : 	case 0x1eac:  // L'Ậ'
; 208  : 		*letter = (char)0xc2;

  00098	c6 00 c2	 mov	 BYTE PTR [eax], -62	; ffffffc2H

; 375  : 		return true;

  0009b	b0 01		 mov	 al, 1

; 384  : }

  0009d	c3		 ret	 0
$LN31@DecomposeL:

; 209  : 		return true;
; 210  : 	case 0x1ea5:  // L'ấ'
; 211  : 	case 0x1ea7:  // L'ầ'
; 212  : 	case 0x1ea9:  // L'ẩ'
; 213  : 	case 0x1eab:  // L'ẫ'
; 214  : 	case 0x1ead:  // L'ậ'
; 215  : 		*letter = (char)0xe2;

  0009e	c6 00 e2	 mov	 BYTE PTR [eax], -30	; ffffffe2H

; 375  : 		return true;

  000a1	b0 01		 mov	 al, 1

; 384  : }

  000a3	c3		 ret	 0
$LN30@DecomposeL:

; 216  : 		return true;
; 217  : 	case 0x00c9:  // L'É'
; 218  : 	case 0x00c8:  // L'È'
; 219  : 	case 0x1eba:  // L'Ẻ'
; 220  : 	case 0x1ebc:  // L'Ẽ'
; 221  : 	case 0x1eb8:  // L'Ẹ'
; 222  : 		*letter = (char)'E';

  000a4	c6 00 45	 mov	 BYTE PTR [eax], 69	; 00000045H

; 375  : 		return true;

  000a7	b0 01		 mov	 al, 1

; 384  : }

  000a9	c3		 ret	 0
$LN29@DecomposeL:

; 223  : 		return true;
; 224  : 	case 0x00e9:  // L'é'
; 225  : 	case 0x00e8:  // L'è'
; 226  : 	case 0x1ebb:  // L'ẻ'
; 227  : 	case 0x1ebd:  // L'ẽ'
; 228  : 	case 0x1eb9:  // L'ẹ'
; 229  : 		*letter = (char)'e';

  000aa	c6 00 65	 mov	 BYTE PTR [eax], 101	; 00000065H

; 375  : 		return true;

  000ad	b0 01		 mov	 al, 1

; 384  : }

  000af	c3		 ret	 0
$LN28@DecomposeL:

; 230  : 		return true;
; 231  : 	case 0x1ebe:  // L'Ế'
; 232  : 	case 0x1ec0:  // L'Ề'
; 233  : 	case 0x1ec2:  // L'Ể'
; 234  : 	case 0x1ec4:  // L'Ễ'
; 235  : 	case 0x1ec6:  // L'Ệ'
; 236  : 		*letter = (char)0xca;

  000b0	c6 00 ca	 mov	 BYTE PTR [eax], -54	; ffffffcaH

; 375  : 		return true;

  000b3	b0 01		 mov	 al, 1

; 384  : }

  000b5	c3		 ret	 0
$LN27@DecomposeL:

; 237  : 		return true;
; 238  : 	case 0x1ebf:  // L'ế'
; 239  : 	case 0x1ec1:  // L'ề'
; 240  : 	case 0x1ec3:  // L'ể'
; 241  : 	case 0x1ec5:  // L'ễ'
; 242  : 	case 0x1ec7:  // L'ệ'
; 243  : 		*letter = (char)0xea;

  000b6	c6 00 ea	 mov	 BYTE PTR [eax], -22	; ffffffeaH

; 375  : 		return true;

  000b9	b0 01		 mov	 al, 1

; 384  : }

  000bb	c3		 ret	 0
$LN26@DecomposeL:

; 244  : 		return true;
; 245  : 	case 0x00cd:  // L'Í'
; 246  : 	case 0x00cc:  // L'Ì'
; 247  : 	case 0x1ec8:  // L'Ỉ'
; 248  : 	case 0x0128:  // L'Ĩ'
; 249  : 	case 0x1eca:  // L'Ị'
; 250  : 		*letter = (char)'I';

  000bc	c6 00 49	 mov	 BYTE PTR [eax], 73	; 00000049H

; 375  : 		return true;

  000bf	b0 01		 mov	 al, 1

; 384  : }

  000c1	c3		 ret	 0
$LN25@DecomposeL:

; 251  : 		return true;
; 252  : 	case 0x00ed:  // L'í'
; 253  : 	case 0x00ec:  // L'ì'
; 254  : 	case 0x1ec9:  // L'ỉ'
; 255  : 	case 0x0129:  // L'ĩ'
; 256  : 	case 0x1ecb:  // L'ị'
; 257  : 		*letter = (char)'i';

  000c2	c6 00 69	 mov	 BYTE PTR [eax], 105	; 00000069H

; 375  : 		return true;

  000c5	b0 01		 mov	 al, 1

; 384  : }

  000c7	c3		 ret	 0
$LN24@DecomposeL:

; 258  : 		return true;
; 259  : 	case 0x00d3:  // L'Ó'
; 260  : 	case 0x00d2:  // L'Ò'
; 261  : 	case 0x1ece:  // L'Ỏ'
; 262  : 	case 0x00d5:  // L'Õ'
; 263  : 	case 0x1ecc:  // L'Ọ'
; 264  : 		*letter = (char)'O';

  000c8	c6 00 4f	 mov	 BYTE PTR [eax], 79	; 0000004fH

; 375  : 		return true;

  000cb	b0 01		 mov	 al, 1

; 384  : }

  000cd	c3		 ret	 0
$LN23@DecomposeL:

; 265  : 		return true;
; 266  : 	case 0x00f3:  // L'ó'
; 267  : 	case 0x00f2:  // L'ò'
; 268  : 	case 0x1ecf:  // L'ỏ'
; 269  : 	case 0x00f5:  // L'õ'
; 270  : 	case 0x1ecd:  // L'ọ'
; 271  : 		*letter = (char)'o';

  000ce	c6 00 6f	 mov	 BYTE PTR [eax], 111	; 0000006fH

; 375  : 		return true;

  000d1	b0 01		 mov	 al, 1

; 384  : }

  000d3	c3		 ret	 0
$LN22@DecomposeL:

; 272  : 		return true;
; 273  : 	case 0x1ed0:  // L'Ố'
; 274  : 	case 0x1ed2:  // L'Ồ'
; 275  : 	case 0x1ed4:  // L'Ổ'
; 276  : 	case 0x1ed6:  // L'Ỗ'
; 277  : 	case 0x1ed8:  // L'Ộ'
; 278  : 		*letter = (char)0xd4;

  000d4	c6 00 d4	 mov	 BYTE PTR [eax], -44	; ffffffd4H

; 375  : 		return true;

  000d7	b0 01		 mov	 al, 1

; 384  : }

  000d9	c3		 ret	 0
$LN21@DecomposeL:

; 279  : 		return true;
; 280  : 	case 0x1ed1:  // L'ố'
; 281  : 	case 0x1ed3:  // L'ồ'
; 282  : 	case 0x1ed5:  // L'ổ'
; 283  : 	case 0x1ed7:  // L'ỗ'
; 284  : 	case 0x1ed9:  // L'ộ'
; 285  : 		*letter = (char)0xf4;

  000da	c6 00 f4	 mov	 BYTE PTR [eax], -12	; fffffff4H

; 375  : 		return true;

  000dd	b0 01		 mov	 al, 1

; 384  : }

  000df	c3		 ret	 0
$LN18@DecomposeL:

; 286  : 		return true;
; 287  : 	case 0x1eda:  // L'Ớ'
; 288  : 	case 0x1edc:  // L'Ờ'
; 289  : 	case 0x1ede:  // L'Ở'
; 290  : 	case 0x1ee0:  // L'Ỡ'
; 291  : 	case 0x1ee2:  // L'Ợ'
; 292  : 		*letter = (char)0xd5;
; 293  : 		return true;
; 294  : 	case 0x1edb:  // L'ớ'
; 295  : 	case 0x1edd:  // L'ờ'
; 296  : 	case 0x1edf:  // L'ở'
; 297  : 	case 0x1ee1:  // L'ỡ'
; 298  : 	case 0x1ee3:  // L'ợ'
; 299  : 		*letter = (char)0xf5;
; 300  : 		return true;
; 301  : 	case 0x00da:  // L'Ú'
; 302  : 	case 0x00d9:  // L'Ù'
; 303  : 	case 0x1ee6:  // L'Ủ'
; 304  : 	case 0x0168:  // L'Ũ'
; 305  : 	case 0x1ee4:  // L'Ụ'
; 306  : 		*letter = (char)'U';

  000e0	c6 00 55	 mov	 BYTE PTR [eax], 85	; 00000055H

; 375  : 		return true;

  000e3	b0 01		 mov	 al, 1

; 384  : }

  000e5	c3		 ret	 0
$LN17@DecomposeL:

; 307  : 		return true;
; 308  : 	case 0x00fa:  // L'ú'
; 309  : 	case 0x00f9:  // L'ù'
; 310  : 	case 0x1ee7:  // L'ủ'
; 311  : 	case 0x0169:  // L'ũ'
; 312  : 	case 0x1ee5:  // L'ụ'
; 313  : 		*letter = (char)'u';

  000e6	c6 00 75	 mov	 BYTE PTR [eax], 117	; 00000075H

; 375  : 		return true;

  000e9	b0 01		 mov	 al, 1

; 384  : }

  000eb	c3		 ret	 0
$LN14@DecomposeL:

; 314  : 		return true;
; 315  : 	case 0x1ee8:  // L'Ứ'
; 316  : 	case 0x1eea:  // L'Ừ'
; 317  : 	case 0x1eec:  // L'Ử'
; 318  : 	case 0x1eee:  // L'Ữ'
; 319  : 	case 0x1ef0:  // L'Ự'
; 320  : 		*letter = (char)0xdd;
; 321  : 		return true;
; 322  : 	case 0x1ee9:  // L'ứ'
; 323  : 	case 0x1eeb:  // L'ừ'
; 324  : 	case 0x1eed:  // L'ử'
; 325  : 	case 0x1eef:  // L'ữ'
; 326  : 	case 0x1ef1:  // L'ự'
; 327  : 		*letter = (char)0xfd;
; 328  : 		return true;
; 329  : 	case 0x1ef2:  // L'Ỳ'
; 330  : 	case 0x00dd:  // L'Ý'
; 331  : 	case 0x1ef6:  // L'Ỷ'
; 332  : 	case 0x1ef8:  // L'Ỹ'
; 333  : 	case 0x1ef4:  // L'Ỵ'
; 334  : 		*letter = (char)'Y';

  000ec	c6 00 59	 mov	 BYTE PTR [eax], 89	; 00000059H

; 375  : 		return true;

  000ef	b0 01		 mov	 al, 1

; 384  : }

  000f1	c3		 ret	 0
$LN13@DecomposeL:

; 335  : 		return true;
; 336  : 	case 0x1ef3:  // L'ỳ'
; 337  : 	case 0x00fd:  // L'ý'
; 338  : 	case 0x1ef7:  // L'ỷ'
; 339  : 	case 0x1ef9:  // L'ỹ'
; 340  : 	case 0x1ef5:  // L'ỵ'
; 341  : 		*letter = (char)'y';

  000f2	c6 00 79	 mov	 BYTE PTR [eax], 121	; 00000079H

; 375  : 		return true;

  000f5	b0 01		 mov	 al, 1

; 384  : }

  000f7	c3		 ret	 0
$LN42@DecomposeL:

; 173  : 	switch(input)

  000f8	81 f9 1d 20 00
	00		 cmp	 ecx, 8221		; 0000201dH
  000fe	74 20		 je	 SHORT $LN2@DecomposeL
  00100	81 f9 ab 20 00
	00		 cmp	 ecx, 8363		; 000020abH
  00106	74 12		 je	 SHORT $LN4@DecomposeL
$LN37@DecomposeL:

; 376  : 	}
; 377  : 
; 378  : 	if(input < 256)

  00108	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0010d	66 3b d1	 cmp	 dx, cx
  00110	73 05		 jae	 SHORT $LN1@DecomposeL

; 379  : 	{
; 380  : 		*letter = (char)input;

  00112	88 10		 mov	 BYTE PTR [eax], dl

; 375  : 		return true;

  00114	b0 01		 mov	 al, 1

; 384  : }

  00116	c3		 ret	 0
$LN1@DecomposeL:

; 381  : 		return true;
; 382  : 	}
; 383  :     return false;

  00117	32 c0		 xor	 al, al

; 384  : }

  00119	c3		 ret	 0
$LN4@DecomposeL:

; 366  : 		return true;
; 367  : 	case 0x20ab: // L'₫'
; 368  : 		*letter = (char)0xfe;

  0011a	c6 00 fe	 mov	 BYTE PTR [eax], -2	; fffffffeH

; 375  : 		return true;

  0011d	b0 01		 mov	 al, 1

; 384  : }

  0011f	c3		 ret	 0
$LN2@DecomposeL:

; 369  : 		return true;
; 370  : 	case 0x201c: // L'“'
; 371  : 		*letter = (char)'"';
; 372  : 		return true;
; 373  : 	case 0x201d: // L'”'
; 374  : 		*letter = (char)'"';

  00120	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H

; 375  : 		return true;

  00123	b0 01		 mov	 al, 1

; 384  : }

  00125	c3		 ret	 0
  00126	8b ff		 npad	 2
$LN46@DecomposeL:
  00128	00 00 00 00	 DD	 $LN36@DecomposeL
  0012c	00 00 00 00	 DD	 $LN30@DecomposeL
  00130	00 00 00 00	 DD	 $LN26@DecomposeL
  00134	00 00 00 00	 DD	 $LN24@DecomposeL
  00138	00 00 00 00	 DD	 $LN18@DecomposeL
  0013c	00 00 00 00	 DD	 $LN14@DecomposeL
  00140	00 00 00 00	 DD	 $LN35@DecomposeL
  00144	00 00 00 00	 DD	 $LN29@DecomposeL
  00148	00 00 00 00	 DD	 $LN25@DecomposeL
  0014c	00 00 00 00	 DD	 $LN23@DecomposeL
  00150	00 00 00 00	 DD	 $LN17@DecomposeL
  00154	00 00 00 00	 DD	 $LN13@DecomposeL
  00158	00 00 00 00	 DD	 $LN12@DecomposeL
  0015c	00 00 00 00	 DD	 $LN11@DecomposeL
  00160	00 00 00 00	 DD	 $LN10@DecomposeL
  00164	00 00 00 00	 DD	 $LN9@DecomposeL
  00168	00 00 00 00	 DD	 $LN8@DecomposeL
  0016c	00 00 00 00	 DD	 $LN7@DecomposeL
  00170	00 00 00 00	 DD	 $LN6@DecomposeL
  00174	00 00 00 00	 DD	 $LN5@DecomposeL
  00178	00 00 00 00	 DD	 $LN37@DecomposeL
$LN43@DecomposeL:
  0017c	00		 DB	 0
  0017d	00		 DB	 0
  0017e	14		 DB	 20			; 00000014H
  0017f	00		 DB	 0
  00180	14		 DB	 20			; 00000014H
  00181	14		 DB	 20			; 00000014H
  00182	14		 DB	 20			; 00000014H
  00183	14		 DB	 20			; 00000014H
  00184	01		 DB	 1
  00185	01		 DB	 1
  00186	14		 DB	 20			; 00000014H
  00187	14		 DB	 20			; 00000014H
  00188	02		 DB	 2
  00189	02		 DB	 2
  0018a	14		 DB	 20			; 00000014H
  0018b	14		 DB	 20			; 00000014H
  0018c	14		 DB	 20			; 00000014H
  0018d	14		 DB	 20			; 00000014H
  0018e	03		 DB	 3
  0018f	03		 DB	 3
  00190	14		 DB	 20			; 00000014H
  00191	03		 DB	 3
  00192	14		 DB	 20			; 00000014H
  00193	14		 DB	 20			; 00000014H
  00194	14		 DB	 20			; 00000014H
  00195	04		 DB	 4
  00196	04		 DB	 4
  00197	14		 DB	 20			; 00000014H
  00198	14		 DB	 20			; 00000014H
  00199	05		 DB	 5
  0019a	14		 DB	 20			; 00000014H
  0019b	14		 DB	 20			; 00000014H
  0019c	06		 DB	 6
  0019d	06		 DB	 6
  0019e	14		 DB	 20			; 00000014H
  0019f	06		 DB	 6
  001a0	14		 DB	 20			; 00000014H
  001a1	14		 DB	 20			; 00000014H
  001a2	14		 DB	 20			; 00000014H
  001a3	14		 DB	 20			; 00000014H
  001a4	07		 DB	 7
  001a5	07		 DB	 7
  001a6	14		 DB	 20			; 00000014H
  001a7	14		 DB	 20			; 00000014H
  001a8	08		 DB	 8
  001a9	08		 DB	 8
  001aa	14		 DB	 20			; 00000014H
  001ab	14		 DB	 20			; 00000014H
  001ac	14		 DB	 20			; 00000014H
  001ad	14		 DB	 20			; 00000014H
  001ae	09		 DB	 9
  001af	09		 DB	 9
  001b0	14		 DB	 20			; 00000014H
  001b1	09		 DB	 9
  001b2	14		 DB	 20			; 00000014H
  001b3	14		 DB	 20			; 00000014H
  001b4	14		 DB	 20			; 00000014H
  001b5	0a		 DB	 10			; 0000000aH
  001b6	0a		 DB	 10			; 0000000aH
  001b7	14		 DB	 20			; 00000014H
  001b8	14		 DB	 20			; 00000014H
  001b9	0b		 DB	 11			; 0000000bH
  001ba	14		 DB	 20			; 00000014H
  001bb	14		 DB	 20			; 00000014H
  001bc	14		 DB	 20			; 00000014H
  001bd	14		 DB	 20			; 00000014H
  001be	0c		 DB	 12			; 0000000cH
  001bf	0d		 DB	 13			; 0000000dH
  001c0	14		 DB	 20			; 00000014H
  001c1	14		 DB	 20			; 00000014H
  001c2	14		 DB	 20			; 00000014H
  001c3	14		 DB	 20			; 00000014H
  001c4	14		 DB	 20			; 00000014H
  001c5	14		 DB	 20			; 00000014H
  001c6	14		 DB	 20			; 00000014H
  001c7	14		 DB	 20			; 00000014H
  001c8	14		 DB	 20			; 00000014H
  001c9	14		 DB	 20			; 00000014H
  001ca	14		 DB	 20			; 00000014H
  001cb	14		 DB	 20			; 00000014H
  001cc	0e		 DB	 14			; 0000000eH
  001cd	0f		 DB	 15			; 0000000fH
  001ce	14		 DB	 20			; 00000014H
  001cf	14		 DB	 20			; 00000014H
  001d0	14		 DB	 20			; 00000014H
  001d1	14		 DB	 20			; 00000014H
  001d2	14		 DB	 20			; 00000014H
  001d3	14		 DB	 20			; 00000014H
  001d4	14		 DB	 20			; 00000014H
  001d5	14		 DB	 20			; 00000014H
  001d6	14		 DB	 20			; 00000014H
  001d7	14		 DB	 20			; 00000014H
  001d8	14		 DB	 20			; 00000014H
  001d9	14		 DB	 20			; 00000014H
  001da	14		 DB	 20			; 00000014H
  001db	14		 DB	 20			; 00000014H
  001dc	14		 DB	 20			; 00000014H
  001dd	14		 DB	 20			; 00000014H
  001de	14		 DB	 20			; 00000014H
  001df	14		 DB	 20			; 00000014H
  001e0	14		 DB	 20			; 00000014H
  001e1	14		 DB	 20			; 00000014H
  001e2	14		 DB	 20			; 00000014H
  001e3	14		 DB	 20			; 00000014H
  001e4	02		 DB	 2
  001e5	08		 DB	 8
  001e6	14		 DB	 20			; 00000014H
  001e7	14		 DB	 20			; 00000014H
  001e8	14		 DB	 20			; 00000014H
  001e9	14		 DB	 20			; 00000014H
  001ea	14		 DB	 20			; 00000014H
  001eb	14		 DB	 20			; 00000014H
  001ec	14		 DB	 20			; 00000014H
  001ed	14		 DB	 20			; 00000014H
  001ee	14		 DB	 20			; 00000014H
  001ef	14		 DB	 20			; 00000014H
  001f0	14		 DB	 20			; 00000014H
  001f1	14		 DB	 20			; 00000014H
  001f2	14		 DB	 20			; 00000014H
  001f3	14		 DB	 20			; 00000014H
  001f4	14		 DB	 20			; 00000014H
  001f5	14		 DB	 20			; 00000014H
  001f6	14		 DB	 20			; 00000014H
  001f7	14		 DB	 20			; 00000014H
  001f8	14		 DB	 20			; 00000014H
  001f9	14		 DB	 20			; 00000014H
  001fa	14		 DB	 20			; 00000014H
  001fb	14		 DB	 20			; 00000014H
  001fc	14		 DB	 20			; 00000014H
  001fd	14		 DB	 20			; 00000014H
  001fe	14		 DB	 20			; 00000014H
  001ff	14		 DB	 20			; 00000014H
  00200	14		 DB	 20			; 00000014H
  00201	14		 DB	 20			; 00000014H
  00202	14		 DB	 20			; 00000014H
  00203	14		 DB	 20			; 00000014H
  00204	14		 DB	 20			; 00000014H
  00205	14		 DB	 20			; 00000014H
  00206	14		 DB	 20			; 00000014H
  00207	14		 DB	 20			; 00000014H
  00208	14		 DB	 20			; 00000014H
  00209	14		 DB	 20			; 00000014H
  0020a	14		 DB	 20			; 00000014H
  0020b	14		 DB	 20			; 00000014H
  0020c	14		 DB	 20			; 00000014H
  0020d	14		 DB	 20			; 00000014H
  0020e	14		 DB	 20			; 00000014H
  0020f	14		 DB	 20			; 00000014H
  00210	14		 DB	 20			; 00000014H
  00211	14		 DB	 20			; 00000014H
  00212	14		 DB	 20			; 00000014H
  00213	14		 DB	 20			; 00000014H
  00214	14		 DB	 20			; 00000014H
  00215	14		 DB	 20			; 00000014H
  00216	14		 DB	 20			; 00000014H
  00217	14		 DB	 20			; 00000014H
  00218	14		 DB	 20			; 00000014H
  00219	14		 DB	 20			; 00000014H
  0021a	14		 DB	 20			; 00000014H
  0021b	14		 DB	 20			; 00000014H
  0021c	14		 DB	 20			; 00000014H
  0021d	14		 DB	 20			; 00000014H
  0021e	14		 DB	 20			; 00000014H
  0021f	14		 DB	 20			; 00000014H
  00220	14		 DB	 20			; 00000014H
  00221	14		 DB	 20			; 00000014H
  00222	14		 DB	 20			; 00000014H
  00223	14		 DB	 20			; 00000014H
  00224	04		 DB	 4
  00225	0a		 DB	 10			; 0000000aH
  00226	14		 DB	 20			; 00000014H
  00227	14		 DB	 20			; 00000014H
  00228	14		 DB	 20			; 00000014H
  00229	14		 DB	 20			; 00000014H
  0022a	14		 DB	 20			; 00000014H
  0022b	14		 DB	 20			; 00000014H
  0022c	14		 DB	 20			; 00000014H
  0022d	14		 DB	 20			; 00000014H
  0022e	14		 DB	 20			; 00000014H
  0022f	14		 DB	 20			; 00000014H
  00230	14		 DB	 20			; 00000014H
  00231	14		 DB	 20			; 00000014H
  00232	14		 DB	 20			; 00000014H
  00233	14		 DB	 20			; 00000014H
  00234	14		 DB	 20			; 00000014H
  00235	14		 DB	 20			; 00000014H
  00236	14		 DB	 20			; 00000014H
  00237	14		 DB	 20			; 00000014H
  00238	14		 DB	 20			; 00000014H
  00239	14		 DB	 20			; 00000014H
  0023a	14		 DB	 20			; 00000014H
  0023b	14		 DB	 20			; 00000014H
  0023c	14		 DB	 20			; 00000014H
  0023d	14		 DB	 20			; 00000014H
  0023e	14		 DB	 20			; 00000014H
  0023f	14		 DB	 20			; 00000014H
  00240	14		 DB	 20			; 00000014H
  00241	14		 DB	 20			; 00000014H
  00242	14		 DB	 20			; 00000014H
  00243	14		 DB	 20			; 00000014H
  00244	14		 DB	 20			; 00000014H
  00245	14		 DB	 20			; 00000014H
  00246	14		 DB	 20			; 00000014H
  00247	14		 DB	 20			; 00000014H
  00248	14		 DB	 20			; 00000014H
  00249	14		 DB	 20			; 00000014H
  0024a	14		 DB	 20			; 00000014H
  0024b	14		 DB	 20			; 00000014H
  0024c	14		 DB	 20			; 00000014H
  0024d	14		 DB	 20			; 00000014H
  0024e	14		 DB	 20			; 00000014H
  0024f	14		 DB	 20			; 00000014H
  00250	14		 DB	 20			; 00000014H
  00251	14		 DB	 20			; 00000014H
  00252	14		 DB	 20			; 00000014H
  00253	14		 DB	 20			; 00000014H
  00254	14		 DB	 20			; 00000014H
  00255	14		 DB	 20			; 00000014H
  00256	14		 DB	 20			; 00000014H
  00257	14		 DB	 20			; 00000014H
  00258	14		 DB	 20			; 00000014H
  00259	14		 DB	 20			; 00000014H
  0025a	14		 DB	 20			; 00000014H
  0025b	14		 DB	 20			; 00000014H
  0025c	10		 DB	 16			; 00000010H
  0025d	11		 DB	 17			; 00000011H
  0025e	14		 DB	 20			; 00000014H
  0025f	14		 DB	 20			; 00000014H
  00260	14		 DB	 20			; 00000014H
  00261	14		 DB	 20			; 00000014H
  00262	14		 DB	 20			; 00000014H
  00263	14		 DB	 20			; 00000014H
  00264	14		 DB	 20			; 00000014H
  00265	14		 DB	 20			; 00000014H
  00266	14		 DB	 20			; 00000014H
  00267	14		 DB	 20			; 00000014H
  00268	14		 DB	 20			; 00000014H
  00269	14		 DB	 20			; 00000014H
  0026a	14		 DB	 20			; 00000014H
  0026b	12		 DB	 18			; 00000012H
  0026c	13		 DB	 19			; 00000013H
  0026d	8d 49 00	 npad	 3
$LN47@DecomposeL:
  00270	00 00 00 00	 DD	 $LN35@DecomposeL
  00274	00 00 00 00	 DD	 $LN36@DecomposeL
  00278	00 00 00 00	 DD	 $LN32@DecomposeL
  0027c	00 00 00 00	 DD	 $LN31@DecomposeL
  00280	00 00 00 00	 DD	 $LN12@DecomposeL
  00284	00 00 00 00	 DD	 $LN11@DecomposeL
  00288	00 00 00 00	 DD	 $LN30@DecomposeL
  0028c	00 00 00 00	 DD	 $LN29@DecomposeL
  00290	00 00 00 00	 DD	 $LN28@DecomposeL
  00294	00 00 00 00	 DD	 $LN27@DecomposeL
  00298	00 00 00 00	 DD	 $LN26@DecomposeL
  0029c	00 00 00 00	 DD	 $LN25@DecomposeL
  002a0	00 00 00 00	 DD	 $LN24@DecomposeL
  002a4	00 00 00 00	 DD	 $LN23@DecomposeL
  002a8	00 00 00 00	 DD	 $LN22@DecomposeL
  002ac	00 00 00 00	 DD	 $LN21@DecomposeL
  002b0	00 00 00 00	 DD	 $LN8@DecomposeL
  002b4	00 00 00 00	 DD	 $LN7@DecomposeL
  002b8	00 00 00 00	 DD	 $LN18@DecomposeL
  002bc	00 00 00 00	 DD	 $LN17@DecomposeL
  002c0	00 00 00 00	 DD	 $LN6@DecomposeL
  002c4	00 00 00 00	 DD	 $LN5@DecomposeL
  002c8	00 00 00 00	 DD	 $LN14@DecomposeL
  002cc	00 00 00 00	 DD	 $LN13@DecomposeL
$LN44@DecomposeL:
  002d0	00		 DB	 0
  002d1	01		 DB	 1
  002d2	00		 DB	 0
  002d3	02		 DB	 2
  002d4	03		 DB	 3
  002d5	02		 DB	 2
  002d6	03		 DB	 3
  002d7	02		 DB	 2
  002d8	03		 DB	 3
  002d9	02		 DB	 2
  002da	03		 DB	 3
  002db	02		 DB	 2
  002dc	03		 DB	 3
  002dd	04		 DB	 4
  002de	05		 DB	 5
  002df	04		 DB	 4
  002e0	05		 DB	 5
  002e1	04		 DB	 4
  002e2	05		 DB	 5
  002e3	04		 DB	 4
  002e4	05		 DB	 5
  002e5	04		 DB	 4
  002e6	05		 DB	 5
  002e7	06		 DB	 6
  002e8	07		 DB	 7
  002e9	06		 DB	 6
  002ea	07		 DB	 7
  002eb	06		 DB	 6
  002ec	07		 DB	 7
  002ed	08		 DB	 8
  002ee	09		 DB	 9
  002ef	08		 DB	 8
  002f0	09		 DB	 9
  002f1	08		 DB	 8
  002f2	09		 DB	 9
  002f3	08		 DB	 8
  002f4	09		 DB	 9
  002f5	08		 DB	 8
  002f6	09		 DB	 9
  002f7	0a		 DB	 10			; 0000000aH
  002f8	0b		 DB	 11			; 0000000bH
  002f9	0a		 DB	 10			; 0000000aH
  002fa	0b		 DB	 11			; 0000000bH
  002fb	0c		 DB	 12			; 0000000cH
  002fc	0d		 DB	 13			; 0000000dH
  002fd	0c		 DB	 12			; 0000000cH
  002fe	0d		 DB	 13			; 0000000dH
  002ff	0e		 DB	 14			; 0000000eH
  00300	0f		 DB	 15			; 0000000fH
  00301	0e		 DB	 14			; 0000000eH
  00302	0f		 DB	 15			; 0000000fH
  00303	0e		 DB	 14			; 0000000eH
  00304	0f		 DB	 15			; 0000000fH
  00305	0e		 DB	 14			; 0000000eH
  00306	0f		 DB	 15			; 0000000fH
  00307	0e		 DB	 14			; 0000000eH
  00308	0f		 DB	 15			; 0000000fH
  00309	10		 DB	 16			; 00000010H
  0030a	11		 DB	 17			; 00000011H
  0030b	10		 DB	 16			; 00000010H
  0030c	11		 DB	 17			; 00000011H
  0030d	10		 DB	 16			; 00000010H
  0030e	11		 DB	 17			; 00000011H
  0030f	10		 DB	 16			; 00000010H
  00310	11		 DB	 17			; 00000011H
  00311	10		 DB	 16			; 00000010H
  00312	11		 DB	 17			; 00000011H
  00313	12		 DB	 18			; 00000012H
  00314	13		 DB	 19			; 00000013H
  00315	12		 DB	 18			; 00000012H
  00316	13		 DB	 19			; 00000013H
  00317	14		 DB	 20			; 00000014H
  00318	15		 DB	 21			; 00000015H
  00319	14		 DB	 20			; 00000014H
  0031a	15		 DB	 21			; 00000015H
  0031b	14		 DB	 20			; 00000014H
  0031c	15		 DB	 21			; 00000015H
  0031d	14		 DB	 20			; 00000014H
  0031e	15		 DB	 21			; 00000015H
  0031f	14		 DB	 20			; 00000014H
  00320	15		 DB	 21			; 00000015H
  00321	16		 DB	 22			; 00000016H
  00322	17		 DB	 23			; 00000017H
  00323	16		 DB	 22			; 00000016H
  00324	17		 DB	 23			; 00000017H
  00325	16		 DB	 22			; 00000016H
  00326	17		 DB	 23			; 00000017H
  00327	16		 DB	 22			; 00000016H
  00328	17		 DB	 23			; 00000017H
?DecomposeLetter@@YA_N_WPAD@Z ENDP			; DecomposeLetter
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?DecomposeTone@@YA_N_WPAD@Z
_TEXT	SEGMENT
?DecomposeTone@@YA_N_WPAD@Z PROC			; DecomposeTone, COMDAT
; _input$ = eax
; _tone$ = ecx

; 388  : 	switch(input)

  00000	0f b7 c0	 movzx	 eax, ax
  00003	3d a1 1e 00 00	 cmp	 eax, 7841		; 00001ea1H
  00008	7f 21		 jg	 SHORT $LN10@DecomposeT
  0000a	3d a0 1e 00 00	 cmp	 eax, 7840		; 00001ea0H
  0000f	7d 4a		 jge	 SHORT $LN1@DecomposeT
  00011	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  00016	3d a9 00 00 00	 cmp	 eax, 169		; 000000a9H
  0001b	77 44		 ja	 SHORT $LN6@DecomposeT
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@DecomposeT[eax]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN13@DecomposeT[eax*4]
$LN10@DecomposeT:
  0002b	2d a2 1e 00 00	 sub	 eax, 7842		; 00001ea2H
  00030	83 f8 57	 cmp	 eax, 87			; 00000057H
  00033	77 2c		 ja	 SHORT $LN6@DecomposeT
  00035	0f b6 90 00 00
	00 00		 movzx	 edx, BYTE PTR $LN12@DecomposeT[eax]
  0003c	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN14@DecomposeT[edx*4]
$LN5@DecomposeT:

; 389  : 	{
; 390  : 	case 0x00c1: // L'Á'
; 391  : 	case 0x00e1: // L'á'
; 392  : 	case 0x1eae: // L'Ắ'
; 393  : 	case 0x1eaf: // L'ắ'
; 394  : 	case 0x1ea4: // L'Ấ'
; 395  : 	case 0x1ea5: // L'ấ'
; 396  : 	case 0x00c9: // L'É'
; 397  : 	case 0x00e9: // L'é'
; 398  : 	case 0x1ebe: // L'Ế'
; 399  : 	case 0x1ebf: // L'ế'
; 400  : 	case 0x00cd: // L'Í'
; 401  : 	case 0x00ed: // L'í'
; 402  : 	case 0x00d3: // L'Ó'
; 403  : 	case 0x00f3: // L'ó'
; 404  : 	case 0x1ed0: // L'Ố'
; 405  : 	case 0x1ed1: // L'ố'
; 406  : 	case 0x1eda: // L'Ớ'
; 407  : 	case 0x1edb: // L'ớ'
; 408  : 	case 0x00da: // L'Ú'
; 409  : 	case 0x00fa: // L'ú'
; 410  : 	case 0x1ee8: // L'Ứ'
; 411  : 	case 0x1ee9: // L'ứ'
; 412  : 	case 0x00dd: // L'Ý'
; 413  : 	case 0x00fd: // L'ý'
; 414  : 		*tone = (char)0xec;

  00043	c6 01 ec	 mov	 BYTE PTR [ecx], -20	; ffffffecH

; 415  : 		return true;

  00046	b0 01		 mov	 al, 1

; 523  : }

  00048	c3		 ret	 0
$LN4@DecomposeT:

; 416  : 	case 0x00c0: // L'À'
; 417  : 	case 0x00e0: // L'à'
; 418  : 	case 0x1eb0: // L'Ằ'
; 419  : 	case 0x1eb1: // L'ằ'
; 420  : 	case 0x1ea6: // L'Ầ'
; 421  : 	case 0x1ea7: // L'ầ'
; 422  : 	case 0x00c8: // L'È'
; 423  : 	case 0x00e8: // L'è'
; 424  : 	case 0x1ec0: // L'Ề'
; 425  : 	case 0x1ec1: // L'ề'
; 426  : 	case 0x00cc: // L'Ì'
; 427  : 	case 0x00ec: // L'ì'
; 428  : 	case 0x00d2: // L'Ò'
; 429  : 	case 0x00f2: // L'ò'
; 430  : 	case 0x1ed2: // L'Ồ'
; 431  : 	case 0x1ed3: // L'ồ'
; 432  : 	case 0x1edc: // L'Ờ'
; 433  : 	case 0x1edd: // L'ờ'
; 434  : 	case 0x00d9: // L'Ù'
; 435  : 	case 0x00f9: // L'ù'
; 436  : 	case 0x1eea: // L'Ừ'
; 437  : 	case 0x1eeb: // L'ừ'
; 438  : 	case 0x1ef2: // L'Ỳ'
; 439  : 	case 0x1ef3: // L'ỳ'
; 440  : 		*tone = (char)0xcc;

  00049	c6 01 cc	 mov	 BYTE PTR [ecx], -52	; ffffffccH

; 441  : 		return true;

  0004c	b0 01		 mov	 al, 1

; 523  : }

  0004e	c3		 ret	 0
$LN3@DecomposeT:

; 442  : 	case 0x1ea2: // L'Ả'
; 443  : 	case 0x1ea3: // L'ả'
; 444  : 	case 0x1eb2: // L'Ẳ'
; 445  : 	case 0x1eb3: // L'ẳ'
; 446  : 	case 0x1ea8: // L'Ẩ'
; 447  : 	case 0x1ea9: // L'ẩ'
; 448  : 	case 0x1eba: // L'Ẻ'
; 449  : 	case 0x1ebb: // L'ẻ'
; 450  : 	case 0x1ec2: // L'Ể'
; 451  : 	case 0x1ec3: // L'ể'
; 452  : 	case 0x1ec8: // L'Ỉ'
; 453  : 	case 0x1ec9: // L'ỉ'
; 454  : 	case 0x1ece: // L'Ỏ'
; 455  : 	case 0x1ecf: // L'ỏ'
; 456  : 	case 0x1ed4: // L'Ổ'
; 457  : 	case 0x1ed5: // L'ổ'
; 458  : 	case 0x1ede: // L'Ở'
; 459  : 	case 0x1edf: // L'ở'
; 460  : 	case 0x1ee6: // L'Ủ'
; 461  : 	case 0x1ee7: // L'ủ'
; 462  : 	case 0x1eec: // L'Ử'
; 463  : 	case 0x1eed: // L'ử'
; 464  : 	case 0x1ef6: // L'Ỷ'
; 465  : 	case 0x1ef7: // L'ỷ'
; 466  : 		*tone = (char)0xd2;

  0004f	c6 01 d2	 mov	 BYTE PTR [ecx], -46	; ffffffd2H

; 467  : 		return true;

  00052	b0 01		 mov	 al, 1

; 523  : }

  00054	c3		 ret	 0
$LN2@DecomposeT:

; 468  : 	case 0x00c3: // L'Ã'
; 469  : 	case 0x00e3: // L'ã'
; 470  : 	case 0x1eb4: // L'Ẵ'
; 471  : 	case 0x1eb5: // L'ẵ'
; 472  : 	case 0x1eaa: // L'Ẫ'
; 473  : 	case 0x1eab: // L'ẫ'
; 474  : 	case 0x1ebc: // L'Ẽ'
; 475  : 	case 0x1ebd: // L'ẽ'
; 476  : 	case 0x1ec4: // L'Ễ'
; 477  : 	case 0x1ec5: // L'ễ'
; 478  : 	case 0x0128: // L'Ĩ'
; 479  : 	case 0x0129: // L'ĩ'
; 480  : 	case 0x00d5: // L'Õ'
; 481  : 	case 0x00f5: // L'õ'
; 482  : 	case 0x1ed6: // L'Ỗ'
; 483  : 	case 0x1ed7: // L'ỗ'
; 484  : 	case 0x1ee0: // L'Ỡ'
; 485  : 	case 0x1ee1: // L'ỡ'
; 486  : 	case 0x0169: // L'ũ'
; 487  : 	case 0x0168: // L'Ũ'
; 488  : 	case 0x1eee: // L'Ữ'
; 489  : 	case 0x1eef: // L'ữ'
; 490  : 	case 0x1ef8: // L'Ỹ'
; 491  : 	case 0x1ef9: // L'ỹ'
; 492  : 		*tone = (char)0xde;

  00055	c6 01 de	 mov	 BYTE PTR [ecx], -34	; ffffffdeH

; 493  : 		return true;

  00058	b0 01		 mov	 al, 1

; 523  : }

  0005a	c3		 ret	 0
$LN1@DecomposeT:

; 494  : 	case 0x1ea0: // L'Ạ'
; 495  : 	case 0x1ea1: // L'ạ'
; 496  : 	case 0x1eb6: // L'Ặ'
; 497  : 	case 0x1eb7: // L'ặ'
; 498  : 	case 0x1eac: // L'Ậ'
; 499  : 	case 0x1ead: // L'ậ'
; 500  : 	case 0x1eb8: // L'Ẹ'
; 501  : 	case 0x1eb9: // L'ẹ'
; 502  : 	case 0x1ec6: // L'Ệ'
; 503  : 	case 0x1ec7: // L'ệ'
; 504  : 	case 0x1eca: // L'Ị'
; 505  : 	case 0x1ecb: // L'ị'
; 506  : 	case 0x1ecc: // L'Ọ'
; 507  : 	case 0x1ecd: // L'ọ'
; 508  : 	case 0x1ed8: // L'Ộ'
; 509  : 	case 0x1ed9: // L'ộ'
; 510  : 	case 0x1ee2: // L'Ợ'
; 511  : 	case 0x1ee3: // L'ợ'
; 512  : 	case 0x1ee4: // L'Ụ'
; 513  : 	case 0x1ee5: // L'ụ'
; 514  : 	case 0x1ef0: // L'Ự'
; 515  : 	case 0x1ef1: // L'ự'
; 516  : 	case 0x1ef4: // L'Ỵ'
; 517  : 	case 0x1ef5: // L'ỵ'
; 518  : 		*tone = (char)0xf2;

  0005b	c6 01 f2	 mov	 BYTE PTR [ecx], -14	; fffffff2H

; 519  : 		return true;

  0005e	b0 01		 mov	 al, 1

; 523  : }

  00060	c3		 ret	 0
$LN6@DecomposeT:

; 520  : 	}
; 521  : 
; 522  : 	return false;

  00061	32 c0		 xor	 al, al

; 523  : }

  00063	c3		 ret	 0
$LN13@DecomposeT:
  00064	00 00 00 00	 DD	 $LN4@DecomposeT
  00068	00 00 00 00	 DD	 $LN5@DecomposeT
  0006c	00 00 00 00	 DD	 $LN2@DecomposeT
  00070	00 00 00 00	 DD	 $LN6@DecomposeT
$LN11@DecomposeT:
  00074	00		 DB	 0
  00075	01		 DB	 1
  00076	03		 DB	 3
  00077	02		 DB	 2
  00078	03		 DB	 3
  00079	03		 DB	 3
  0007a	03		 DB	 3
  0007b	03		 DB	 3
  0007c	00		 DB	 0
  0007d	01		 DB	 1
  0007e	03		 DB	 3
  0007f	03		 DB	 3
  00080	00		 DB	 0
  00081	01		 DB	 1
  00082	03		 DB	 3
  00083	03		 DB	 3
  00084	03		 DB	 3
  00085	03		 DB	 3
  00086	00		 DB	 0
  00087	01		 DB	 1
  00088	03		 DB	 3
  00089	02		 DB	 2
  0008a	03		 DB	 3
  0008b	03		 DB	 3
  0008c	03		 DB	 3
  0008d	00		 DB	 0
  0008e	01		 DB	 1
  0008f	03		 DB	 3
  00090	03		 DB	 3
  00091	01		 DB	 1
  00092	03		 DB	 3
  00093	03		 DB	 3
  00094	00		 DB	 0
  00095	01		 DB	 1
  00096	03		 DB	 3
  00097	02		 DB	 2
  00098	03		 DB	 3
  00099	03		 DB	 3
  0009a	03		 DB	 3
  0009b	03		 DB	 3
  0009c	00		 DB	 0
  0009d	01		 DB	 1
  0009e	03		 DB	 3
  0009f	03		 DB	 3
  000a0	00		 DB	 0
  000a1	01		 DB	 1
  000a2	03		 DB	 3
  000a3	03		 DB	 3
  000a4	03		 DB	 3
  000a5	03		 DB	 3
  000a6	00		 DB	 0
  000a7	01		 DB	 1
  000a8	03		 DB	 3
  000a9	02		 DB	 2
  000aa	03		 DB	 3
  000ab	03		 DB	 3
  000ac	03		 DB	 3
  000ad	00		 DB	 0
  000ae	01		 DB	 1
  000af	03		 DB	 3
  000b0	03		 DB	 3
  000b1	01		 DB	 1
  000b2	03		 DB	 3
  000b3	03		 DB	 3
  000b4	03		 DB	 3
  000b5	03		 DB	 3
  000b6	03		 DB	 3
  000b7	03		 DB	 3
  000b8	03		 DB	 3
  000b9	03		 DB	 3
  000ba	03		 DB	 3
  000bb	03		 DB	 3
  000bc	03		 DB	 3
  000bd	03		 DB	 3
  000be	03		 DB	 3
  000bf	03		 DB	 3
  000c0	03		 DB	 3
  000c1	03		 DB	 3
  000c2	03		 DB	 3
  000c3	03		 DB	 3
  000c4	03		 DB	 3
  000c5	03		 DB	 3
  000c6	03		 DB	 3
  000c7	03		 DB	 3
  000c8	03		 DB	 3
  000c9	03		 DB	 3
  000ca	03		 DB	 3
  000cb	03		 DB	 3
  000cc	03		 DB	 3
  000cd	03		 DB	 3
  000ce	03		 DB	 3
  000cf	03		 DB	 3
  000d0	03		 DB	 3
  000d1	03		 DB	 3
  000d2	03		 DB	 3
  000d3	03		 DB	 3
  000d4	03		 DB	 3
  000d5	03		 DB	 3
  000d6	03		 DB	 3
  000d7	03		 DB	 3
  000d8	03		 DB	 3
  000d9	03		 DB	 3
  000da	03		 DB	 3
  000db	03		 DB	 3
  000dc	02		 DB	 2
  000dd	02		 DB	 2
  000de	03		 DB	 3
  000df	03		 DB	 3
  000e0	03		 DB	 3
  000e1	03		 DB	 3
  000e2	03		 DB	 3
  000e3	03		 DB	 3
  000e4	03		 DB	 3
  000e5	03		 DB	 3
  000e6	03		 DB	 3
  000e7	03		 DB	 3
  000e8	03		 DB	 3
  000e9	03		 DB	 3
  000ea	03		 DB	 3
  000eb	03		 DB	 3
  000ec	03		 DB	 3
  000ed	03		 DB	 3
  000ee	03		 DB	 3
  000ef	03		 DB	 3
  000f0	03		 DB	 3
  000f1	03		 DB	 3
  000f2	03		 DB	 3
  000f3	03		 DB	 3
  000f4	03		 DB	 3
  000f5	03		 DB	 3
  000f6	03		 DB	 3
  000f7	03		 DB	 3
  000f8	03		 DB	 3
  000f9	03		 DB	 3
  000fa	03		 DB	 3
  000fb	03		 DB	 3
  000fc	03		 DB	 3
  000fd	03		 DB	 3
  000fe	03		 DB	 3
  000ff	03		 DB	 3
  00100	03		 DB	 3
  00101	03		 DB	 3
  00102	03		 DB	 3
  00103	03		 DB	 3
  00104	03		 DB	 3
  00105	03		 DB	 3
  00106	03		 DB	 3
  00107	03		 DB	 3
  00108	03		 DB	 3
  00109	03		 DB	 3
  0010a	03		 DB	 3
  0010b	03		 DB	 3
  0010c	03		 DB	 3
  0010d	03		 DB	 3
  0010e	03		 DB	 3
  0010f	03		 DB	 3
  00110	03		 DB	 3
  00111	03		 DB	 3
  00112	03		 DB	 3
  00113	03		 DB	 3
  00114	03		 DB	 3
  00115	03		 DB	 3
  00116	03		 DB	 3
  00117	03		 DB	 3
  00118	03		 DB	 3
  00119	03		 DB	 3
  0011a	03		 DB	 3
  0011b	03		 DB	 3
  0011c	02		 DB	 2
  0011d	02		 DB	 2
  0011e	8b ff		 npad	 2
$LN14@DecomposeT:
  00120	00 00 00 00	 DD	 $LN3@DecomposeT
  00124	00 00 00 00	 DD	 $LN5@DecomposeT
  00128	00 00 00 00	 DD	 $LN4@DecomposeT
  0012c	00 00 00 00	 DD	 $LN2@DecomposeT
  00130	00 00 00 00	 DD	 $LN1@DecomposeT
$LN12@DecomposeT:
  00134	00		 DB	 0
  00135	00		 DB	 0
  00136	01		 DB	 1
  00137	01		 DB	 1
  00138	02		 DB	 2
  00139	02		 DB	 2
  0013a	00		 DB	 0
  0013b	00		 DB	 0
  0013c	03		 DB	 3
  0013d	03		 DB	 3
  0013e	04		 DB	 4
  0013f	04		 DB	 4
  00140	01		 DB	 1
  00141	01		 DB	 1
  00142	02		 DB	 2
  00143	02		 DB	 2
  00144	00		 DB	 0
  00145	00		 DB	 0
  00146	03		 DB	 3
  00147	03		 DB	 3
  00148	04		 DB	 4
  00149	04		 DB	 4
  0014a	04		 DB	 4
  0014b	04		 DB	 4
  0014c	00		 DB	 0
  0014d	00		 DB	 0
  0014e	03		 DB	 3
  0014f	03		 DB	 3
  00150	01		 DB	 1
  00151	01		 DB	 1
  00152	02		 DB	 2
  00153	02		 DB	 2
  00154	00		 DB	 0
  00155	00		 DB	 0
  00156	03		 DB	 3
  00157	03		 DB	 3
  00158	04		 DB	 4
  00159	04		 DB	 4
  0015a	00		 DB	 0
  0015b	00		 DB	 0
  0015c	04		 DB	 4
  0015d	04		 DB	 4
  0015e	04		 DB	 4
  0015f	04		 DB	 4
  00160	00		 DB	 0
  00161	00		 DB	 0
  00162	01		 DB	 1
  00163	01		 DB	 1
  00164	02		 DB	 2
  00165	02		 DB	 2
  00166	00		 DB	 0
  00167	00		 DB	 0
  00168	03		 DB	 3
  00169	03		 DB	 3
  0016a	04		 DB	 4
  0016b	04		 DB	 4
  0016c	01		 DB	 1
  0016d	01		 DB	 1
  0016e	02		 DB	 2
  0016f	02		 DB	 2
  00170	00		 DB	 0
  00171	00		 DB	 0
  00172	03		 DB	 3
  00173	03		 DB	 3
  00174	04		 DB	 4
  00175	04		 DB	 4
  00176	04		 DB	 4
  00177	04		 DB	 4
  00178	00		 DB	 0
  00179	00		 DB	 0
  0017a	01		 DB	 1
  0017b	01		 DB	 1
  0017c	02		 DB	 2
  0017d	02		 DB	 2
  0017e	00		 DB	 0
  0017f	00		 DB	 0
  00180	03		 DB	 3
  00181	03		 DB	 3
  00182	04		 DB	 4
  00183	04		 DB	 4
  00184	02		 DB	 2
  00185	02		 DB	 2
  00186	04		 DB	 4
  00187	04		 DB	 4
  00188	00		 DB	 0
  00189	00		 DB	 0
  0018a	03		 DB	 3
  0018b	03		 DB	 3
?DecomposeTone@@YA_N_WPAD@Z ENDP			; DecomposeTone
_TEXT	ENDS
PUBLIC	?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z	; EL_String_Encode_Vietnamese
; Function compile flags: /Ogtp
;	COMDAT ?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z
_TEXT	SEGMENT
_tone$27064 = -1					; size = 1
_wide$ = 8						; size = 4
_wideLen$ = 12						; size = 4
_letter$27062 = 15					; size = 1
_multi$ = 16						; size = 4
_multiLen$ = 20						; size = 4
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z PROC	; EL_String_Encode_Vietnamese, COMDAT

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 527  : 	if(wideLen < 0)

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _wideLen$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	85 db		 test	 ebx, ebx
  0000c	7d 18		 jge	 SHORT $LN6@EL_String_@2

; 528  : 		wideLen = (int)wcslen(wide) + 1;

  0000e	8b 45 08	 mov	 eax, DWORD PTR _wide$[ebp]
  00011	8d 50 02	 lea	 edx, DWORD PTR [eax+2]
$LL13@EL_String_@2:
  00014	66 8b 08	 mov	 cx, WORD PTR [eax]
  00017	83 c0 02	 add	 eax, 2
  0001a	66 85 c9	 test	 cx, cx
  0001d	75 f5		 jne	 SHORT $LL13@EL_String_@2
  0001f	2b c2		 sub	 eax, edx
  00021	d1 f8		 sar	 eax, 1
  00023	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]
$LN6@EL_String_@2:

; 529  : 
; 530  : 	int src = 0;

  00026	33 ff		 xor	 edi, edi

; 531  : 	int dest = 0;

  00028	33 f6		 xor	 esi, esi

; 532  : 
; 533  : 	if(wideLen > 0)

  0002a	85 db		 test	 ebx, ebx
  0002c	7e 4b		 jle	 SHORT $LN15@EL_String_@2
  0002e	8b ff		 npad	 2
$LL4@EL_String_@2:

; 534  : 	{
; 535  : 		while(src < wideLen && dest < multiLen)

  00030	3b 75 14	 cmp	 esi, DWORD PTR _multiLen$[ebp]
  00033	7d 44		 jge	 SHORT $LN15@EL_String_@2

; 536  : 		{
; 537  : 			char letter;
; 538  : 			if(DecomposeLetter(wide[src], &letter))

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _wide$[ebp]
  00038	66 8b 14 79	 mov	 dx, WORD PTR [ecx+edi*2]
  0003c	8d 45 0f	 lea	 eax, DWORD PTR _letter$27062[ebp]
  0003f	e8 00 00 00 00	 call	 ?DecomposeLetter@@YA_N_WPAD@Z ; DecomposeLetter
  00044	84 c0		 test	 al, al
  00046	74 0a		 je	 SHORT $LN2@EL_String_@2

; 539  : 			{
; 540  : 				multi[dest++] = letter;

  00048	8a 55 0f	 mov	 dl, BYTE PTR _letter$27062[ebp]
  0004b	8b 45 10	 mov	 eax, DWORD PTR _multi$[ebp]
  0004e	88 14 06	 mov	 BYTE PTR [esi+eax], dl
  00051	46		 inc	 esi
$LN2@EL_String_@2:

; 541  : 			}
; 542  : 
; 543  : 			char tone;
; 544  : 			if(DecomposeTone(wide[src], &tone) && dest < multiLen)

  00052	8b 55 08	 mov	 edx, DWORD PTR _wide$[ebp]
  00055	66 8b 04 7a	 mov	 ax, WORD PTR [edx+edi*2]
  00059	8d 4d ff	 lea	 ecx, DWORD PTR _tone$27064[ebp]
  0005c	e8 00 00 00 00	 call	 ?DecomposeTone@@YA_N_WPAD@Z ; DecomposeTone
  00061	84 c0		 test	 al, al
  00063	74 0f		 je	 SHORT $LN16@EL_String_@2
  00065	3b 75 14	 cmp	 esi, DWORD PTR _multiLen$[ebp]
  00068	7d 0a		 jge	 SHORT $LN16@EL_String_@2

; 545  : 			{
; 546  : 				multi[dest++] = tone;

  0006a	8a 45 ff	 mov	 al, BYTE PTR _tone$27064[ebp]
  0006d	8b 4d 10	 mov	 ecx, DWORD PTR _multi$[ebp]
  00070	88 04 0e	 mov	 BYTE PTR [esi+ecx], al
  00073	46		 inc	 esi
$LN16@EL_String_@2:

; 547  : 			}
; 548  : 
; 549  : 			++src;

  00074	47		 inc	 edi
  00075	3b fb		 cmp	 edi, ebx
  00077	7c b7		 jl	 SHORT $LL4@EL_String_@2
$LN15@EL_String_@2:
  00079	5f		 pop	 edi

; 550  : 		}
; 551  : 	}
; 552  : 
; 553  : 	return dest;

  0007a	8b c6		 mov	 eax, esi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx

; 554  : }

  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z ENDP	; EL_String_Encode_Vietnamese
_TEXT	ENDS
END
